// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PreventorSDK
import AVFoundation
import Combine
import DocumentReader
import Foundation
import PAlamofire
import PLottie
@_exported import PreventorSDK
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
public protocol PreventorSDKDelegate {
  func onStart()
  func onFinish()
  func onError(error: PreventorSDK.PreventorSDKErrorCode)
  func onSubmitted()
}
public struct PreventorButton : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init()
  public typealias Body = @_opaqueReturnTypeOf("$s12PreventorSDK0A6ButtonV4bodyQrvp", 0) __
}
public struct PreventorSDKConfig {
  public init(flowType: Swift.String, apiKey: Swift.String, tenant: Swift.String, env: Swift.String, banknu: Swift.String, secret: Swift.String)
}
public enum PreventorSDKErrorCode : Swift.String {
  case CANCELLED_BY_USER
  case BIOMETRIC_AUTHENTICATION_FAILED
  case BAD_STEP_BY_USER
  case MISSING_PARAMETERS
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PreventorSDKResultState {
  case none
  case loading
  case success
  case failed
  public static func == (a: PreventorSDK.PreventorSDKResultState, b: PreventorSDK.PreventorSDKResultState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PSDK {
  public static let shared: PreventorSDK.PSDK
  public func callBack(delegate: PreventorSDK.PreventorSDKDelegate)
  public func initialize(config: PreventorSDK.PreventorSDKConfig, complete: @escaping (PreventorSDK.PreventorSDKResultState) -> Swift.Void)
  public func validateApiKey(complete: @escaping (Swift.Bool) -> Swift.Void)
  @objc deinit
}
extension PreventorSDK.PreventorSDKErrorCode : Swift.Equatable {}
extension PreventorSDK.PreventorSDKErrorCode : Swift.Hashable {}
extension PreventorSDK.PreventorSDKErrorCode : Swift.RawRepresentable {}
extension PreventorSDK.PreventorSDKResultState : Swift.Equatable {}
extension PreventorSDK.PreventorSDKResultState : Swift.Hashable {}
