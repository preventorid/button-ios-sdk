// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name PreventorSDK
import AVFAudio
import AVFoundation
import Alamofire
import Combine
import CommonCrypto
import CoreLocation
import CoreNFC
import DocumentReader
import Foundation
import Network
import PDFKit
import PSDKCommon
import PSDKUIKit
import Photos
@_exported import PreventorSDK
import QuartzCore
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _CoreNFC_UIKit
import _StringProcessing
import _SwiftConcurrencyShims
public enum PSDKErrorCode : Swift.String {
  case CANCELLED_BY_USER
  case CANCELLED_BY_CLIENT
  case BIOMETRIC_AUTHENTICATION_FAILED
  case BAD_STEP_BY_USER
  case MISSING_PARAMETERS
  case TIME_OUT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PSDKResult {
  public let cifCode: Swift.String?
  public let ticketId: Swift.String?
  public let flowID: Swift.String
  public let flowStatus: PreventorSDK.FlowStatus
  public let dispositionStatus: PreventorSDK.DispositionStatus
  public let data: Foundation.Data?
}
public struct PSDKPhoneResponse {
  public let errorMessage: Swift.String?
  public let success: Swift.Bool
  public init(errorMessage: Swift.String?, success: Swift.Bool)
}
public typealias PerformNextFlow = ((@escaping (Swift.String?) -> Swift.Void) -> Swift.Void)
public protocol PSDKDelegate {
  func onPrepareCompleted()
  func onStart()
  func willFinish(result: PreventorSDK.PSDKResult) -> PreventorSDK.PerformNextFlow?
  func didFinish(result: PreventorSDK.PSDKResult)
  func onError(error: PreventorSDK.PSDKErrorCode)
  func onSubmitted(result: PreventorSDK.PSDKResult)
  func onNextStep(verification: PreventorSDK.ViewID?)
  func validatePhone(phone: PreventorSDK.PSDKPhoneModel, completion: @escaping (PreventorSDK.PSDKPhoneResponse) -> Swift.Void)
}
extension PreventorSDK.PSDKDelegate {
  public func onPrepareCompleted()
  public func onStart()
  public func didFinish(result: PreventorSDK.PSDKResult)
  public func willFinish(result: PreventorSDK.PSDKResult) -> PreventorSDK.PerformNextFlow?
  public func onError(error: PreventorSDK.PSDKErrorCode)
  public func onSubmitted(result: PreventorSDK.PSDKResult)
  public func onNextStep(verification: PreventorSDK.ViewID?)
  public func validatePhone(phone: PreventorSDK.PSDKPhoneModel, completion: @escaping (PreventorSDK.PSDKPhoneResponse) -> Swift.Void)
}
public enum ViewID : Swift.String, Swift.CaseIterable {
  case TERMS
  case SELFIES_BIOMETRICS
  case SELFIES_AUTHENTICATION
  case DOCUMENT_PHOTOS
  case OTP_EMAIL
  case OTP_PHONE
  case USER_CONFIRMATION
  case KYC_ONBOARDING
  case SIGNATURE
  case DOCUMENT_VIEWER
  case VIDEO
  case VOICE
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PreventorSDK.ViewID]
  public typealias RawValue = Swift.String
  public static var allCases: [PreventorSDK.ViewID] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct PSDKFlowCustomization {
  public var useWLL: Swift.Bool
  public var documentTypeToScan: PreventorSDK.DocType?
}
@_hasMissingDesignatedInitializers public class PSDK {
  public static let shared: PreventorSDK.PSDK
  public var delegate: (any PreventorSDK.PSDKDelegate)?
  public var customization: PreventorSDK.PSDKCustomization
  public var flowCustomization: PreventorSDK.PSDKFlowCustomization
  public func startID(controller: UIKit.UIViewController, animated: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func getConfigStatus() -> PreventorSDK.PSDKResultState
  public func getPhone() -> PreventorSDK.PSDKPhoneModel?
  public func setPhone(phone: PreventorSDK.PSDKPhoneModel?)
  public func initialize(config: PreventorSDK.PSDKConfig, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateBroker(broker: Swift.String)
  public func updateCifCode(cifCode: Swift.String)
  public func getCifCode() -> Swift.String?
  public func updateFullName(fullName: Swift.String)
  public func loadDatabase(completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func getSteps(complete: @escaping ([Swift.String]) -> Swift.Void)
  public func stop(completion: (() -> Swift.Void)? = nil)
  public func updateTicket(ticket: Swift.String)
  public func detach()
  @objc deinit
}
public enum DispositionStatus : Swift.String {
  case RETRY
  case FAILED
  case PASSED
  case NEEDS_REVIEW
  case PROCESSING
  case ABANDONED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FlowStatus : Swift.String {
  case IN_PROGRESS
  case REJECTED
  case ACCEPTED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ProcessType : Swift.String {
  case ID_PROOFING
  case FACIAL_ANALYSIS
  case PHOTO_MATCHING
  case LIVENESS_DETECTION
  case DOCUMENT_DETECTION
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PSDKResultState : Swift.Equatable {
  case none
  case loading
  case success
  case failed(Swift.String)
  case forbidden
  public var rawValue: Swift.String {
    get
  }
  public static func == (lhs: PreventorSDK.PSDKResultState, rhs: PreventorSDK.PSDKResultState) -> Swift.Bool
}
extension Swift.Bool : SwiftUI.VectorArithmetic {
  public static func - (lhs: Swift.Bool, rhs: Swift.Bool) -> Swift.Bool
  public static func + (lhs: Swift.Bool, rhs: Swift.Bool) -> Swift.Bool
  public mutating func scale(by rhs: Swift.Double)
  public var magnitudeSquared: Swift.Double {
    get
  }
  public static var zero: Swift.Bool {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class FullScreenDelegate : ObjectiveC.NSObject, UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
  @_Concurrency.MainActor(unsafe) @objc final public func animationController(forDismissed dismissed: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
public struct LMLanguageModel : Swift.Codable {
  public let button: PreventorSDK.LMButton
  public let titleAppBar: PreventorSDK.LMTitleAppBar
  public let message: PreventorSDK.LMMessage
  public let label: PreventorSDK.LMLabel
  public let labelButton: PreventorSDK.LMLabelButton
  public let labelError: PreventorSDK.LMLabelError
  public let hyperLink: PreventorSDK.LMHyperLink
  public let placeholder: PreventorSDK.LMPlaceholder
  public let documents: PreventorSDK.LMDocuments
  public let pages: PreventorSDK.LMPages
  public let tips: PreventorSDK.LMTips
  public let bottomSheet: PreventorSDK.LMBottomSheet
  public let language: [PreventorSDK.LMLanguage]
  public let secretPhrase: [Swift.String]
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case button
    case titleAppBar
    case message
    case label
    case labelButton
    case labelError
    case hyperLink
    case placeholder
    case documents
    case pages
    case tips
    case bottomSheet
    case language
    case secretPhrase
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(button: PreventorSDK.LMButton, titleAppBar: PreventorSDK.LMTitleAppBar, message: PreventorSDK.LMMessage, label: PreventorSDK.LMLabel, labelButton: PreventorSDK.LMLabelButton, labelError: PreventorSDK.LMLabelError, hyperLink: PreventorSDK.LMHyperLink, placeholder: PreventorSDK.LMPlaceholder, documents: PreventorSDK.LMDocuments, pages: PreventorSDK.LMPages, tips: PreventorSDK.LMTips, bottomSheet: PreventorSDK.LMBottomSheet, language: [PreventorSDK.LMLanguage], secretPhrase: [Swift.String])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMBottomSheet : Swift.Codable {
  public let timeOut: PreventorSDK.LMAgeNotAllowed
  public let tryAgainSelfie: PreventorSDK.LMSkipRFID
  public let tryAgainDocument: PreventorSDK.LMSkipRFID
  public let tryAgainRFID: PreventorSDK.LMSkipRFID
  public let expired: PreventorSDK.LMAgeNotAllowed
  public let idNotPermitted: PreventorSDK.LMAgeNotAllowed
  public let idExpired: PreventorSDK.LMAgeNotAllowed
  public let uploadDocument: PreventorSDK.LMSkipRFID
  public let uploadError: PreventorSDK.LMSkipRFID
  public let skipRFID: PreventorSDK.LMSkipRFID
  public let informationNoMatch: PreventorSDK.LMAgeNotAllowed
  public let cancelVerification: PreventorSDK.LMAgeNotAllowed
  public let exceededAttempts: PreventorSDK.LMAgeNotAllowed
  public let locationDenied: PreventorSDK.LMAgeNotAllowed
  public let cameraDenied: PreventorSDK.LMAgeNotAllowed
  public let phoneIDDenied: PreventorSDK.LMAgeNotAllowed
  public let tryAgainOTP: PreventorSDK.LMSkipRFID
  public let otpError: PreventorSDK.LMAgeNotAllowed
  public let ageNotAllowed: PreventorSDK.LMAgeNotAllowed
  public let issuingNotPermitted: PreventorSDK.LMAgeNotAllowed
  public let locationNoAllowed: PreventorSDK.LMAgeNotAllowed
  public let ipNotAllowed: PreventorSDK.LMAgeNotAllowed
  public let idNoMatch: PreventorSDK.LMAgeNotAllowed
  public let selectLanguage: PreventorSDK.LMAgeNotAllowed
  public let forceCamera: PreventorSDK.LMAgeNotAllowed
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case timeOut
    case tryAgainSelfie
    case tryAgainDocument
    case tryAgainRFID
    case expired
    case idNotPermitted
    case idExpired
    case uploadDocument
    case uploadError
    case skipRFID
    case informationNoMatch
    case cancelVerification
    case exceededAttempts
    case locationDenied
    case cameraDenied
    case phoneIDDenied
    case tryAgainOTP
    case otpError
    case ageNotAllowed
    case issuingNotPermitted
    case locationNoAllowed
    case ipNotAllowed
    case idNoMatch
    case selectLanguage
    case forceCamera
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(timeOut: PreventorSDK.LMAgeNotAllowed, tryAgainSelfie: PreventorSDK.LMSkipRFID, tryAgainDocument: PreventorSDK.LMSkipRFID, tryAgainRFID: PreventorSDK.LMSkipRFID, expired: PreventorSDK.LMAgeNotAllowed, idNotPermitted: PreventorSDK.LMAgeNotAllowed, idExpired: PreventorSDK.LMAgeNotAllowed, uploadDocument: PreventorSDK.LMSkipRFID, uploadError: PreventorSDK.LMSkipRFID, skipRFID: PreventorSDK.LMSkipRFID, informationNoMatch: PreventorSDK.LMAgeNotAllowed, cancelVerification: PreventorSDK.LMAgeNotAllowed, exceededAttempts: PreventorSDK.LMAgeNotAllowed, locationDenied: PreventorSDK.LMAgeNotAllowed, cameraDenied: PreventorSDK.LMAgeNotAllowed, phoneIDDenied: PreventorSDK.LMAgeNotAllowed, tryAgainOTP: PreventorSDK.LMSkipRFID, otpError: PreventorSDK.LMAgeNotAllowed, ageNotAllowed: PreventorSDK.LMAgeNotAllowed, issuingNotPermitted: PreventorSDK.LMAgeNotAllowed, locationNoAllowed: PreventorSDK.LMAgeNotAllowed, ipNotAllowed: PreventorSDK.LMAgeNotAllowed, idNoMatch: PreventorSDK.LMAgeNotAllowed, selectLanguage: PreventorSDK.LMAgeNotAllowed, forceCamera: PreventorSDK.LMAgeNotAllowed)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMAgeNotAllowed : Swift.Codable {
  public let title: Swift.String
  public let subTitle: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case title
    case subTitle
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(title: Swift.String, subTitle: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMSkipRFID : Swift.Codable {
  public let title: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case title
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(title: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMButton : Swift.Codable {
  public let verifyMe: Swift.String
  public let next: Swift.String
  public let iamReady: Swift.String
  public let tryAgain: Swift.String
  public let confirm: Swift.String
  public let save: Swift.String
  public let finish: Swift.String
  public let retake: Swift.String
  public let retry: Swift.String
  public let no: Swift.String
  public let yes: Swift.String
  public let yesConfirm: Swift.String
  public let submit: Swift.String
  public let noReturn: Swift.String
  public let close: Swift.String
  public let iamHere: Swift.String
  public let buttonContinue: Swift.String
  public let fromGallery: Swift.String
  public let clear: Swift.String
  public let scanMyFace: Swift.String
  public let skip: Swift.String
  public let noCancel: Swift.String
  public let scan: Swift.String
  public let reset: Swift.String
  public let loading: Swift.String
  public let uploadPhoto: Swift.String
  public let updating: Swift.String
  public let addID: Swift.String
  public let recordVoice: Swift.String
  public let recordVoiceAndVideo: Swift.String
  public let cancel: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case verifyMe
    case next
    case iamReady
    case tryAgain
    case confirm
    case save
    case finish
    case retake
    case retry
    case no
    case yes
    case yesConfirm
    case submit
    case noReturn
    case close
    case iamHere
    case buttonContinue
    case fromGallery
    case clear
    case scanMyFace
    case skip
    case noCancel
    case scan
    case reset
    case loading
    case uploadPhoto
    case updating
    case addID
    case recordVoice
    case recordVoiceAndVideo
    case cancel
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(verifyMe: Swift.String, next: Swift.String, iamReady: Swift.String, tryAgain: Swift.String, confirm: Swift.String, save: Swift.String, finish: Swift.String, retake: Swift.String, retry: Swift.String, no: Swift.String, yes: Swift.String, yesConfirm: Swift.String, submit: Swift.String, noReturn: Swift.String, close: Swift.String, iamHere: Swift.String, buttonContinue: Swift.String, fromGallery: Swift.String, clear: Swift.String, scanMyFace: Swift.String, skip: Swift.String, noCancel: Swift.String, scan: Swift.String, reset: Swift.String, loading: Swift.String, uploadPhoto: Swift.String, updating: Swift.String, addID: Swift.String, recordVoice: Swift.String, recordVoiceAndVideo: Swift.String, cancel: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMDocuments : Swift.Codable {
  public let passport: Swift.String
  public let driverLicense: Swift.String
  public let idCard: Swift.String
  public let residentPermitCard: Swift.String
  public let visa: Swift.String
  public let votingCard: Swift.String
  public let identityDocument: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case passport
    case driverLicense
    case idCard
    case residentPermitCard
    case visa
    case votingCard
    case identityDocument
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(passport: Swift.String, driverLicense: Swift.String, idCard: Swift.String, residentPermitCard: Swift.String, visa: Swift.String, votingCard: Swift.String, identityDocument: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMHyperLink : Swift.Codable {
  public let agreements: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case agreements
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(agreements: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMLabel : Swift.Codable {
  public let processing: Swift.String
  public let readmore: Swift.String
  public let readless: Swift.String
  public let male: Swift.String
  public let female: Swift.String
  public let flashOn: Swift.String
  public let verifying: Swift.String
  public let enrolling: Swift.String
  public let didNotReceiveCode: Swift.String
  public let resendVerificationCode: Swift.String
  public let weSendCodeEmail: Swift.String
  public let weSendCodePhone: Swift.String
  public let useImage: Swift.String
  public let age: Swift.String
  public let number: Swift.String
  public let documentNumber: Swift.String
  public let issuingCountry: Swift.String
  public let issuingState: Swift.String
  public let expirationDate: Swift.String
  public let dateIssue: Swift.String
  public let surname: Swift.String
  public let givenName: Swift.String
  public let countryOfCitizenship: Swift.String
  public let dob: Swift.String
  public let maritalStatus: Swift.String
  public let address: Swift.String
  public let wouldTryAgain: Swift.String
  public let prepareSteps: PreventorSDK.LMPrepareSteps
  public let uploadFront: Swift.String
  public let uploadBack: Swift.String
  public let invalidCode: Swift.String
  public let expiredCode: Swift.String
  public let cameraSelfie: PreventorSDK.LMCameraSelfie
  public let and: Swift.String
  public let frontID: Swift.String
  public let backID: Swift.String
  public let fullName: Swift.String
  public let gender: Swift.String
  public let thankYou: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case processing
    case readmore
    case readless
    case male
    case female
    case flashOn
    case verifying
    case enrolling
    case didNotReceiveCode
    case resendVerificationCode
    case weSendCodeEmail
    case weSendCodePhone
    case useImage
    case age
    case number
    case documentNumber
    case issuingCountry
    case issuingState
    case expirationDate
    case dateIssue
    case surname
    case givenName
    case countryOfCitizenship
    case dob
    case maritalStatus
    case address
    case wouldTryAgain
    case prepareSteps
    case uploadFront
    case uploadBack
    case invalidCode
    case expiredCode
    case cameraSelfie
    case and
    case frontID
    case backID
    case fullName
    case gender
    case thankYou
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(processing: Swift.String, readmore: Swift.String, readless: Swift.String, male: Swift.String, female: Swift.String, flashOn: Swift.String, verifying: Swift.String, enrolling: Swift.String, didNotReceiveCode: Swift.String, resendVerificationCode: Swift.String, weSendCodeEmail: Swift.String, weSendCodePhone: Swift.String, useImage: Swift.String, age: Swift.String, number: Swift.String, documentNumber: Swift.String, issuingCountry: Swift.String, issuingState: Swift.String, expirationDate: Swift.String, dateIssue: Swift.String, surname: Swift.String, givenName: Swift.String, countryOfCitizenship: Swift.String, dob: Swift.String, maritalStatus: Swift.String, address: Swift.String, wouldTryAgain: Swift.String, prepareSteps: PreventorSDK.LMPrepareSteps, uploadFront: Swift.String, uploadBack: Swift.String, invalidCode: Swift.String, expiredCode: Swift.String, cameraSelfie: PreventorSDK.LMCameraSelfie, and: Swift.String, frontID: Swift.String, backID: Swift.String, fullName: Swift.String, gender: Swift.String, thankYou: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMCameraSelfie : Swift.Codable {
  public let correct: Swift.String
  public let outside: Swift.String
  public let far: Swift.String
  public let noFace: Swift.String
  public let motionDetection: PreventorSDK.LMMotionDetection
  public let motionDetectionDone: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case correct
    case outside
    case far
    case noFace
    case motionDetection
    case motionDetectionDone
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(correct: Swift.String, outside: Swift.String, far: Swift.String, noFace: Swift.String, motionDetection: PreventorSDK.LMMotionDetection, motionDetectionDone: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMMotionDetection : Swift.Codable {
  public let titles: [Swift.String]
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case titles
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(titles: [Swift.String])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMPrepareSteps : Swift.Codable {
  public let selfie: Swift.String
  public let listDocument: Swift.String
  public let email: Swift.String
  public let phone: Swift.String
  public let proofResidency: Swift.String
  public let video: Swift.String
  public let selfieAuthentication: Swift.String
  public let eSign: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case selfie
    case listDocument
    case email
    case phone
    case proofResidency
    case video
    case selfieAuthentication
    case eSign
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(selfie: Swift.String, listDocument: Swift.String, email: Swift.String, phone: Swift.String, proofResidency: Swift.String, video: Swift.String, selfieAuthentication: Swift.String, eSign: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMLabelButton : Swift.Codable {
  public let resendCode: Swift.String
  public let photoLibrary: Swift.String
  public let takePhoto: Swift.String
  public let chooseFile: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case resendCode
    case photoLibrary
    case takePhoto
    case chooseFile
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(resendCode: Swift.String, photoLibrary: Swift.String, takePhoto: Swift.String, chooseFile: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMLabelError : Swift.Codable {
  public let numberAlreadyRegister: Swift.String
  public let invalidEmail: Swift.String
  public let imageDimension: Swift.String
  public let notPermitted: Swift.String
  public let expired: Swift.String
  public let invalidOtpCode: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case numberAlreadyRegister
    case invalidEmail
    case imageDimension
    case notPermitted
    case expired
    case invalidOtpCode
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(numberAlreadyRegister: Swift.String, invalidEmail: Swift.String, imageDimension: Swift.String, notPermitted: Swift.String, expired: Swift.String, invalidOtpCode: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMLanguage : Swift.Codable {
  public let iso2: Swift.String
  public let name: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case iso2
    case name
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(iso2: Swift.String, name: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMMessage : Swift.Codable {
  public let emailAlreadyRegistered: Swift.String
  public let holdDocument: Swift.String
  public let turnFlash: Swift.String
  public let avoidGlareShadow: Swift.String
  public let documentScanning: [Swift.String]
  public let infoMessageError: [PreventorSDK.LMInfoMessageError]
  public let recordVoiceMessage: Swift.String
  public let sayPassphrase: Swift.String
  public let tapButtonSign: Swift.String
  public let rotateYourPhone: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case emailAlreadyRegistered
    case holdDocument
    case turnFlash
    case avoidGlareShadow
    case documentScanning
    case infoMessageError
    case recordVoiceMessage
    case sayPassphrase
    case tapButtonSign
    case rotateYourPhone
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(emailAlreadyRegistered: Swift.String, holdDocument: Swift.String, turnFlash: Swift.String, avoidGlareShadow: Swift.String, documentScanning: [Swift.String], infoMessageError: [PreventorSDK.LMInfoMessageError], recordVoiceMessage: Swift.String, sayPassphrase: Swift.String, tapButtonSign: Swift.String, rotateYourPhone: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMInfoMessageError : Swift.Codable {
  public let code: Swift.String
  public let message: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case code
    case message
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(code: Swift.String, message: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMPages : Swift.Codable {
  public let prepareSteps: PreventorSDK.LMSkipRFID
  public let phone: PreventorSDK.LMAgeNotAllowed
  public let phoneVerification: PreventorSDK.LMAgeNotAllowed
  public let email: PreventorSDK.LMAgeNotAllowed
  public let emailVerification: PreventorSDK.LMAgeNotAllowed
  public let prepareSelfie: PreventorSDK.LMAgeNotAllowed
  public let cameraSelfie: PreventorSDK.LMSkipRFID
  public let chooseCountry: PreventorSDK.LMAgeNotAllowed
  public let chooseDocument: PreventorSDK.LMAgeNotAllowed
  public let globalDocument: PreventorSDK.LMAgeNotAllowed
  public let cameraDocument: PreventorSDK.LMAgeNotAllowed
  public let uploadDocument: PreventorSDK.LMSkipRFID
  public let prepareRFID: PreventorSDK.LMSkipRFID
  public let personalInformation: PreventorSDK.LMSkipRFID
  public let congratulations: PreventorSDK.LMAgeNotAllowed
  public let error: PreventorSDK.LMAgeNotAllowed
  public let failedAttempts: PreventorSDK.LMAgeNotAllowed
  public let couldNotCompleted: PreventorSDK.LMAgeNotAllowed
  public let voice: PreventorSDK.LMAgeNotAllowed
  public let voiceAndFace: PreventorSDK.LMAgeNotAllowed
  public let authenticateVoice: PreventorSDK.LMAgeNotAllowed
  public let authenticateVoiceAndFace: PreventorSDK.LMAgeNotAllowed
  public let noEnrolled: PreventorSDK.LMAgeNotAllowed
  public let sign: PreventorSDK.LMAgeNotAllowed
  public let voiceAuthentication: PreventorSDK.LMAgeNotAllowed
  public let noInternet: PreventorSDK.LMAgeNotAllowed
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case prepareSteps
    case phone
    case phoneVerification
    case email
    case emailVerification
    case prepareSelfie
    case cameraSelfie
    case chooseCountry
    case chooseDocument
    case globalDocument
    case cameraDocument
    case uploadDocument
    case prepareRFID
    case personalInformation
    case congratulations
    case error
    case failedAttempts
    case couldNotCompleted
    case voice
    case voiceAndFace
    case authenticateVoice
    case authenticateVoiceAndFace
    case noEnrolled
    case sign
    case voiceAuthentication
    case noInternet
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(prepareSteps: PreventorSDK.LMSkipRFID, phone: PreventorSDK.LMAgeNotAllowed, phoneVerification: PreventorSDK.LMAgeNotAllowed, email: PreventorSDK.LMAgeNotAllowed, emailVerification: PreventorSDK.LMAgeNotAllowed, prepareSelfie: PreventorSDK.LMAgeNotAllowed, cameraSelfie: PreventorSDK.LMSkipRFID, chooseCountry: PreventorSDK.LMAgeNotAllowed, chooseDocument: PreventorSDK.LMAgeNotAllowed, globalDocument: PreventorSDK.LMAgeNotAllowed, cameraDocument: PreventorSDK.LMAgeNotAllowed, uploadDocument: PreventorSDK.LMSkipRFID, prepareRFID: PreventorSDK.LMSkipRFID, personalInformation: PreventorSDK.LMSkipRFID, congratulations: PreventorSDK.LMAgeNotAllowed, error: PreventorSDK.LMAgeNotAllowed, failedAttempts: PreventorSDK.LMAgeNotAllowed, couldNotCompleted: PreventorSDK.LMAgeNotAllowed, voice: PreventorSDK.LMAgeNotAllowed, voiceAndFace: PreventorSDK.LMAgeNotAllowed, authenticateVoice: PreventorSDK.LMAgeNotAllowed, authenticateVoiceAndFace: PreventorSDK.LMAgeNotAllowed, noEnrolled: PreventorSDK.LMAgeNotAllowed, sign: PreventorSDK.LMAgeNotAllowed, voiceAuthentication: PreventorSDK.LMAgeNotAllowed, noInternet: PreventorSDK.LMAgeNotAllowed)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMPlaceholder : Swift.Codable {
  public let selectTypeID: Swift.String
  public let emailAddress: Swift.String
  public let phoneNumber: Swift.String
  public let selectCountry: Swift.String
  public let search: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case selectTypeID
    case emailAddress
    case phoneNumber
    case selectCountry
    case search
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(selectTypeID: Swift.String, emailAddress: Swift.String, phoneNumber: Swift.String, selectCountry: Swift.String, search: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMTips : Swift.Codable {
  public let selfie: PreventorSDK.LMAuthenticateFace
  public let document: PreventorSDK.LMAuthenticateFace
  public let uploadDocument: PreventorSDK.LMAuthenticateFace
  public let scanRFID: PreventorSDK.LMAuthenticateFace
  public let recordVoice: PreventorSDK.LMAuthenticateFace
  public let recordFace: PreventorSDK.LMAuthenticateFace
  public let authenticateFace: PreventorSDK.LMAuthenticateFace
  public let authenticateVoice: PreventorSDK.LMAuthenticateFace
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case selfie
    case document
    case uploadDocument
    case scanRFID
    case recordVoice
    case recordFace
    case authenticateFace
    case authenticateVoice
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(selfie: PreventorSDK.LMAuthenticateFace, document: PreventorSDK.LMAuthenticateFace, uploadDocument: PreventorSDK.LMAuthenticateFace, scanRFID: PreventorSDK.LMAuthenticateFace, recordVoice: PreventorSDK.LMAuthenticateFace, recordFace: PreventorSDK.LMAuthenticateFace, authenticateFace: PreventorSDK.LMAuthenticateFace, authenticateVoice: PreventorSDK.LMAuthenticateFace)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMAuthenticateFace : Swift.Codable {
  public let title: Swift.String
  public let items: [Swift.String]
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case title
    case items
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(title: Swift.String, items: [Swift.String])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMTitleAppBar : Swift.Codable {
  public let identityVerification: Swift.String
  public let signBelow: Swift.String
  public let viewDocument: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case identityVerification
    case signBelow
    case viewDocument
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(identityVerification: Swift.String, signBelow: Swift.String, viewDocument: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public static func buildToast(message: Swift.String, font: UIKit.UIFont = .psdkF18) -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func addMessage(message: Swift.String, font: UIKit.UIFont = .psdkF18, centerYConstant: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func showToast(message: Swift.String, font: UIKit.UIFont = .psdkF18, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func findView(name: Swift.String) -> UIKit.UIView
}
public struct FloatButton : SwiftUI.ViewModifier {
  @_Concurrency.MainActor(unsafe) public func body(content: PreventorSDK.FloatButton.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s12PreventorSDK11FloatButtonV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
public struct PSDKPhoneModel : Swift.Codable {
  public let ic: Swift.String
  public let code: Swift.String
  public let phone: Swift.String
  public init(ic: Swift.String, code: Swift.String, phone: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class UIPreventorButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func initView()
  @objc deinit
}
public struct VerifyingView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(text: Swift.String)
  public typealias Body = @_opaqueReturnTypeOf("$s12PreventorSDK13VerifyingViewV4bodyQrvp", 0) __
}
public struct PSDKConfig {
  public init(flowID: Swift.String? = nil, cifCode: Swift.String? = nil, apiKey: Swift.String, tenant: Swift.String, env: Swift.String, banknu: Swift.String, secret: Swift.String, invitation: Swift.String? = nil, broker: Swift.String? = nil)
}
public struct PSDKCustomization {
  public var hiddeMessagePassed: Swift.Bool
  public var hiddeMessageFailed: Swift.Bool
  public var hiddeMessageNotCompleted: Swift.Bool
  public var hiddeSelfieIntro: Swift.Bool
  public var hiddeScanDocumentIntro: Swift.Bool
  public var hiddeTC: Swift.Bool
  public var navStepByStep: Swift.Bool
  public var navigationTitle: Swift.String {
    get
    set
  }
}
extension SwiftUI.View {
  public func startPreventorSDK(isPresented: SwiftUI.Binding<Swift.Bool>, onComplete: @escaping () -> Swift.Void) -> some SwiftUI.View
  
}
public enum DocType {
  case passport
  case driverLicense
  case idCard
  case visa
  case eCard
  case identityDocument
  case residencePermit
  case voting_card
  case regula(Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public typealias PSDKBaseResponse = PSDKCommon.PSDKBaseResponse
public typealias PSDKGeneralResponse = PSDKCommon.PSDKGeneralResponse
public typealias PSDKStatusDecodable = PSDKCommon.PSDKStatusDecodable
public typealias PSDKMessage = PSDKCommon.PSDKMessage
extension DocumentReader.CaptureMode {
  public init(rawValue: Swift.String)
}
extension UIKit.UIInterfaceOrientationMask {
  public init(rawValue: Swift.String)
}
public enum PSDKFlowType : Swift.String {
  case AUTHENTICATION
  case IDENTITY_VERIFICATION
  case DIGITAL_ONBOARDING
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct PreventorButton : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public init()
  public typealias Body = @_opaqueReturnTypeOf("$s12PreventorSDK0A6ButtonV4bodyQrvp", 0) __
}
extension PreventorSDK.PreventorButton {
  @_Concurrency.MainActor(unsafe) public func disabled(_ dissabled: Swift.Bool) -> PreventorSDK.PreventorButton
}
extension PreventorSDK.PSDKErrorCode : Swift.Equatable {}
extension PreventorSDK.PSDKErrorCode : Swift.Hashable {}
extension PreventorSDK.PSDKErrorCode : Swift.RawRepresentable {}
extension PreventorSDK.ViewID : Swift.Equatable {}
extension PreventorSDK.ViewID : Swift.Hashable {}
extension PreventorSDK.ViewID : Swift.RawRepresentable {}
extension PreventorSDK.DispositionStatus : Swift.Equatable {}
extension PreventorSDK.DispositionStatus : Swift.Hashable {}
extension PreventorSDK.DispositionStatus : Swift.RawRepresentable {}
extension PreventorSDK.FlowStatus : Swift.Equatable {}
extension PreventorSDK.FlowStatus : Swift.Hashable {}
extension PreventorSDK.FlowStatus : Swift.RawRepresentable {}
extension PreventorSDK.ProcessType : Swift.Equatable {}
extension PreventorSDK.ProcessType : Swift.Hashable {}
extension PreventorSDK.ProcessType : Swift.RawRepresentable {}
extension PreventorSDK.LMLanguageModel.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMLanguageModel.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMLanguageModel.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMBottomSheet.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMBottomSheet.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMBottomSheet.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMAgeNotAllowed.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMAgeNotAllowed.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMAgeNotAllowed.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMSkipRFID.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMSkipRFID.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMSkipRFID.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMButton.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMButton.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMButton.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMDocuments.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMDocuments.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMDocuments.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMHyperLink.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMHyperLink.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMHyperLink.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMLabel.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMLabel.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMLabel.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMCameraSelfie.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMCameraSelfie.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMCameraSelfie.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMMotionDetection.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMMotionDetection.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMMotionDetection.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMPrepareSteps.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMPrepareSteps.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMPrepareSteps.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMLabelButton.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMLabelButton.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMLabelButton.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMLabelError.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMLabelError.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMLabelError.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMLanguage.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMLanguage.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMLanguage.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMMessage.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMMessage.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMMessage.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMInfoMessageError.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMInfoMessageError.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMInfoMessageError.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMPages.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMPages.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMPages.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMPlaceholder.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMPlaceholder.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMPlaceholder.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMTips.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMTips.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMTips.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMAuthenticateFace.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMAuthenticateFace.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMAuthenticateFace.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.LMTitleAppBar.CodingKeys : Swift.Equatable {}
extension PreventorSDK.LMTitleAppBar.CodingKeys : Swift.Hashable {}
extension PreventorSDK.LMTitleAppBar.CodingKeys : Swift.RawRepresentable {}
extension PreventorSDK.PSDKFlowType : Swift.Equatable {}
extension PreventorSDK.PSDKFlowType : Swift.Hashable {}
extension PreventorSDK.PSDKFlowType : Swift.RawRepresentable {}
