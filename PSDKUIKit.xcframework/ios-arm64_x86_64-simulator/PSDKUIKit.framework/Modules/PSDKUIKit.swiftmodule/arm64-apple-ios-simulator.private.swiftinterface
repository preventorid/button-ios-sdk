// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name PSDKUIKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Combine
import Foundation
import Lottie
@_exported import PSDKUIKit
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_hasMissingDesignatedInitializers @available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
@_Concurrency.MainActor(unsafe) public class PSDKIntrospectionUIViewController : UIKit.UIViewController {
  @objc deinit
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
public struct PSDKUIKitIntrospectionViewController<TargetViewControllerType> : SwiftUI.UIViewControllerRepresentable where TargetViewControllerType : UIKit.UIViewController {
  public init(selector: @escaping (UIKit.UIViewController) -> TargetViewControllerType?, customize: @escaping (TargetViewControllerType) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: SwiftUI.UIViewControllerRepresentableContext<PSDKUIKit.PSDKUIKitIntrospectionViewController<TargetViewControllerType>>) -> PSDKUIKit.PSDKIntrospectionUIViewController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: PSDKUIKit.PSDKIntrospectionUIViewController, context: SwiftUI.UIViewControllerRepresentableContext<PSDKUIKit.PSDKUIKitIntrospectionViewController<TargetViewControllerType>>)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = PSDKUIKit.PSDKIntrospectionUIViewController
}
public struct PSDKInstructionView : SwiftUI.View {
  public enum Style {
    case light
    case dark
    public static func == (a: PSDKUIKit.PSDKInstructionView.Style, b: PSDKUIKit.PSDKInstructionView.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(description: Swift.String)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit19PSDKInstructionViewV4bodyQrvp", 0) __
}
public struct PSDKInstructionModalView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init<Content>(showModal: SwiftUI.Binding<Swift.Bool>, description: Swift.String, modalRouter: PSDKUIKit.PSDKModalRouter, content: () -> Content) where Content : SwiftUI.View
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit24PSDKInstructionModalViewV4bodyQrvp", 0) __
}
public protocol PSDKIdentifiable : Swift.Equatable, Swift.Identifiable {
  var findItem: Swift.Bool { get }
  var description: Swift.String { get }
}
public protocol PSDKChooseState : PSDKUIKit.PSDKTFState {
  associatedtype Item : PSDKUIKit.PSDKIdentifiable
  var item: Self.Item? { get }
  init(item: Self.Item?)
}
extension PSDKUIKit.PSDKIdentifiable {
  public var findItem: Swift.Bool {
    get
  }
}
public struct PSDKChooseItemState<Item> : PSDKUIKit.PSDKChooseState where Item : PSDKUIKit.PSDKIdentifiable {
  public var item: Item?
  public init(item: Item? = nil)
}
public protocol PSDKCountryState : PSDKUIKit.PSDKChooseState where Self.Item == PSDKUIKit.PSDKCountryModel {
}
public struct PSDKCountryItemState : PSDKUIKit.PSDKCountryState {
  public var item: PSDKUIKit.PSDKCountryModel?
  public init(item: PSDKUIKit.PSDKCountryModel? = nil)
  public typealias Item = PSDKUIKit.PSDKCountryModel
}
open class PSDKChooseReducer<State> where State : PSDKUIKit.PSDKChooseState {
  public init()
  open func newState(item: State.Item?, state: State) -> State
  @objc deinit
}
public protocol ChooseStore : PSDKUIKit.PSDKTextFieldStoreProtocol where Self.StateType : PSDKUIKit.PSDKChooseState {
  typealias Item = Self.StateType.Item
  var data: [Self.Item] { get }
  var autoDescriptable: Swift.Bool { get }
  var showDropdown: Swift.Bool { get set }
  func dispatch(item: Self.Item?, completion: (() -> Swift.Void)?)
}
open class PSDKChooseStore<State> : PSDKUIKit.PSDKTextFieldStore<State>, PSDKUIKit.ChooseStore where State : PSDKUIKit.PSDKChooseState {
  @Combine.Published @_projectedValueProperty($showDropdown) public var showDropdown: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $showDropdown: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var data: [PSDKUIKit.PSDKChooseStore<State>.Item] {
    get
    set
  }
  final public let reducer: PSDKUIKit.PSDKChooseReducer<State>
  public var autoDescriptable: Swift.Bool
  public init(state: State, data: [PSDKUIKit.PSDKChooseStore<State>.Item], reducer: PSDKUIKit.PSDKChooseReducer<State> = .init())
  public init(data: [PSDKUIKit.PSDKChooseStore<State>.Item], reducer: PSDKUIKit.PSDKChooseReducer<State> = .init()) where State == PSDKUIKit.PSDKCountryItemState
  open func dispatch(item: PSDKUIKit.PSDKChooseStore<State>.Item?, completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
public enum PressedMode {
  case pressStartIcon
  case pressEndIcon
  case pressAny
  public static func == (a: PSDKUIKit.PressedMode, b: PSDKUIKit.PressedMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct PSDKDropdown<Item> : SwiftUI.View where Item : PSDKUIKit.PSDKIdentifiable {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(options: [Item], hint: Swift.String = "", showSharedField: Swift.Bool = false, onTaped: @escaping (Item) -> Swift.Void, createDropdownElement: @escaping (Item) -> PSDKUIKit.PSDKDropdownOptionElement<Item>)
  @_Concurrency.MainActor(unsafe) public func filterData(item: Item, text: Swift.String) -> Swift.Bool
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit12PSDKDropdownV4bodyQrvp", 0) __<Item>
}
public struct PSDKDropdownOptionElement<Item> : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(item: Item, content: @escaping (Swift.Bool) -> SwiftUI.AnyView)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit25PSDKDropdownOptionElementV4bodyQrvp", 0) __<Item>
}
public struct PSDKButton<Label> : SwiftUI.View where Label : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(style: PSDKUIKit.PSDKButtonStyle = PSDKButtonStyle(), disabled: Swift.Bool = false, action: @escaping () -> Swift.Void, fullWidth: Swift.Bool = false, accessibilityIdentifier: Swift.String? = nil, @SwiftUI.ViewBuilder label: () -> Label, padding: CoreFoundation.CGFloat? = nil)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit10PSDKButtonV4bodyQrvp", 0) __<Label>
}
extension PSDKUIKit.PSDKButton where Label == SwiftUI.Text {
  public init<S>(_ title: S, style: PSDKUIKit.PSDKButtonStyle = PSDKButtonStyle(), disabled: Swift.Bool = false, fullWidth: Swift.Bool = false, accessibilityIdentifier: Swift.String? = nil, action: @escaping () -> Swift.Void, padding: CoreFoundation.CGFloat? = nil) where S : Swift.StringProtocol
}
public struct PSDKProgressBar : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(progressPercentage: Swift.Double, barHeight: CoreFoundation.CGFloat = 10, progressColor: PSDKUIKit.PSDKColor = .brandAccent, verticalPadding: CoreFoundation.CGFloat = 10, isRounded: Swift.Bool = true)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit15PSDKProgressBarV4bodyQrvp", 0) __
}
public struct PSDKFlowLayout<RefreshBinding, Data, ItemView> : SwiftUI.View where ItemView : SwiftUI.View {
  public init(mode: PSDKUIKit.PSDKFlowLayout<RefreshBinding, Data, ItemView>.Mode, binding: SwiftUI.Binding<RefreshBinding>, items: [Data], itemSpacing: CoreFoundation.CGFloat = 4, @SwiftUI.ViewBuilder viewMapping: @escaping (Data) -> ItemView)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public enum Mode {
    case scrollable, vstack
    public static func == (a: PSDKUIKit.PSDKFlowLayout<RefreshBinding, Data, ItemView>.Mode, b: PSDKUIKit.PSDKFlowLayout<RefreshBinding, Data, ItemView>.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit14PSDKFlowLayoutV4bodyQrvp", 0) __<RefreshBinding, Data, ItemView>
}
extension PSDKUIKit.PSDKFlowLayout where RefreshBinding == Swift.Never? {
  public init(mode: PSDKUIKit.PSDKFlowLayout<RefreshBinding, Data, ItemView>.Mode, items: [Data], itemSpacing: CoreFoundation.CGFloat = 4, @SwiftUI.ViewBuilder viewMapping: @escaping (Data) -> ItemView)
}
public struct PSDKAttributedText : SwiftUI.View {
  public init(_ content: Swift.String, foregroundColor: PSDKUIKit.PSDKColor = .onSurfaceGray400, font: SwiftUI.Font = .psdkF16, textAligment: SwiftUI.TextAlignment = .leading)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit18PSDKAttributedTextV4bodyQrvp", 0) __
}
public enum PSDKStyle {
  case dark, light, custom, `default`
  public var normalize: PSDKUIKit.PSDKStyle {
    get
  }
  public static func == (a: PSDKUIKit.PSDKStyle, b: PSDKUIKit.PSDKStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PSDKUIColorManager {
  public static let defaultColor: PSDKUIKit.PSDKUIColorManager
  public init?(from data: [Foundation.Data])
  public func updateStyle(style: PSDKUIKit.PSDKStyle)
  @objc deinit
}
public struct PSDKSuccessIcon : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init()
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit15PSDKSuccessIconV4bodyQrvp", 0) __
}
extension CoreVideo.CVBuffer {
  public var uiImage: UIKit.UIImage? {
    get
  }
}
public struct PSDKTextFieldMessages {
  public let emptyErrorMessage: Swift.String?
  public let minLengthErrorMessage: Swift.String?
  public let maxLengthErrorMessage: Swift.String?
  public let invalidImputMessage: Swift.String?
  public init(emptyErrorMessage: Swift.String? = nil, minLengthErrorMessage: Swift.String? = nil, maxLengthErrorMessage: Swift.String? = nil, invalidImputMessage: Swift.String? = nil)
}
public protocol PSDKThemeProvider {
  var style: PSDKUIKit.PSDKUIColorManager { get }
}
public enum PSDKTheme : PSDKUIKit.PSDKThemeProvider {
  case `default`
  case custom(PSDKUIKit.PSDKUIColorManager)
  public var style: PSDKUIKit.PSDKUIColorManager {
    get
  }
}
public struct OptionalScrollViewModifier : SwiftUI.ViewModifier {
  public enum Option {
    case sizeClass
    case custom(Swift.Bool)
  }
  @_Concurrency.MainActor(unsafe) public func body(content: PSDKUIKit.OptionalScrollViewModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit26OptionalScrollViewModifierV4body7contentQr7SwiftUI01_dE8_ContentVyACG_tF", 0) __
}
extension SwiftUI.View {
  public func withAdaptiveScrollView(option: PSDKUIKit.OptionalScrollViewModifier.Option = .sizeClass) -> some SwiftUI.View
  
}
extension PSDKUIKit.PSDKFieldBase {
  public var backgroundColor: any PSDKUIKit.PSDKColorProvider {
    get
  }
  public var textColor: SwiftUI.Color {
    get
  }
  public var defaultTextColor: any PSDKUIKit.PSDKColorProvider {
    get
  }
  public var hintColor: any PSDKUIKit.PSDKColorProvider {
    get
  }
  public var defaultHintColor: any PSDKUIKit.PSDKColorProvider {
    get
  }
  public var lineColor: any PSDKUIKit.PSDKColorProvider {
    get
  }
  public var defaultLineColor: any PSDKUIKit.PSDKColorProvider {
    get
  }
  public var floatHintColor: any PSDKUIKit.PSDKColorProvider {
    get
  }
}
extension SwiftUI.View {
  @available(iOSApplicationExtension, unavailable)
  public func withKeyboardEnabled(bottom: CoreFoundation.CGFloat = 16) -> some SwiftUI.View
  
  public func border(width: CoreFoundation.CGFloat, edges: [SwiftUI.Edge], color: SwiftUI.Color) -> some SwiftUI.View
  
  public func placeholder<Content>(when: Swift.Bool, alignment: SwiftUI.Alignment = .leading, @SwiftUI.ViewBuilder _ placeholder: () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
  public func menu<Content>(_ showMenu: Swift.Bool, content: () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
  public func toAnyView() -> SwiftUI.AnyView
  public func demiModal(_ modal: PSDKUIKit.PSDKDemiModal?) -> some SwiftUI.View
  
  public func demiModal(presented: SwiftUI.Binding<Swift.Bool>, router: PSDKUIKit.PSDKModalRouter, opacity: Swift.Double = 0.8) -> some SwiftUI.View
  
  public func demiModal<Modal>(presented: SwiftUI.Binding<Swift.Bool>, title: Swift.String, opacity: Swift.Double = 0.8, @SwiftUI.ViewBuilder _ body: () -> Modal) -> some SwiftUI.View where Modal : SwiftUI.View
  
  public func cornerRadius(_ radius: CoreFoundation.CGFloat, corners: UIKit.UIRectCorner) -> some SwiftUI.View
  
  public func dismissKeyboard()
  public func onAnimationCompleted<Value>(for value: Value, completion: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Self, PSDKUIKit.PSDKAnimationCompletionObserverModifier<Value>> where Value : SwiftUI.VectorArithmetic
  public func backgroundColor(_ psdkColor: any PSDKUIKit.PSDKColorProvider) -> some SwiftUI.View
  
  public func shake(with shakes: Swift.Bool) -> some SwiftUI.View
  
  public func psdkKerning(_ kerning: CoreFoundation.CGFloat) -> some SwiftUI.View
  
}
public struct PSDKOffsetKeyboard : SwiftUI.ViewModifier {
  public init(bottom: CoreFoundation.CGFloat = 16)
  @_Concurrency.MainActor(unsafe) public func body(content: PSDKUIKit.PSDKOffsetKeyboard.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit18PSDKOffsetKeyboardV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
extension SwiftUI.Color {
  public init(hex: Swift.String)
  public static var psdkShadowBoxButtonColor: SwiftUI.Color {
    get
  }
  public static var PSDKUIColorGold: SwiftUI.Color {
    get
  }
}
@available(iOS 14.0, *)
extension SwiftUI.Color {
  public func toHexString() -> Swift.String
}
extension UIKit.UIColor {
  public static var psdkShadowBoxButtonColor: UIKit.UIColor {
    get
  }
  public static var PSDKUIColorGold: UIKit.UIColor {
    get
  }
  public func toHexString() -> Swift.String
  public func rgb() -> Swift.Int?
  public var color: SwiftUI.Color {
    get
  }
}
public struct PSDKStringBold : SwiftUI.View {
  public init(_ content: Swift.String, colorHighlighted: PSDKUIKit.PSDKColor, isBold: Swift.Bool = true, colorUnHighlighted: PSDKUIKit.PSDKColor = .onSurfaceGray400, font: SwiftUI.Font = .psdkF16)
  public struct PSDKElement : Swift.Identifiable {
    public let id: Foundation.UUID
    public init(content: Swift.String, isBold: Swift.Bool)
    public typealias ID = Foundation.UUID
  }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit14PSDKStringBoldV4bodyQrvp", 0) __
}
extension Foundation.Date {
  public func getStringDate(dateFormat: Swift.String, locale: Foundation.Locale = .current) -> Swift.String
}
@_Concurrency.MainActor(unsafe) public struct PSDKDemiModal : SwiftUI.ViewModifier {
  @_Concurrency.MainActor(unsafe) public init(presented: SwiftUI.Binding<Swift.Bool>, router: PSDKUIKit.PSDKModalRouter, opacity: Swift.Double = 0.8)
  @_Concurrency.MainActor(unsafe) public init<State>(store: PSDKUIKit.PSDKChooseStore<State>, router: PSDKUIKit.PSDKModalRouter, opacity: Swift.Double = 0.8) where State : PSDKUIKit.PSDKChooseState
  @_Concurrency.MainActor(unsafe) public init<Modal>(presented: SwiftUI.Binding<Swift.Bool>, title: Swift.String, opacity: Swift.Double = 0.8, @SwiftUI.ViewBuilder _ body: () -> Modal) where Modal : SwiftUI.View
  @_Concurrency.MainActor(unsafe) public func body(content: PSDKUIKit.PSDKDemiModal.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit13PSDKDemiModalV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor(unsafe) public struct PSDKTextFieldGeneral<State> : PSDKUIKit.PSDKTextFieldBase where State : PSDKUIKit.PSDKTFState {
  @_Concurrency.MainActor(unsafe) public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @_Concurrency.MainActor(unsafe) public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @SwiftUI.ObservedObject @_projectedValueProperty($store) @_Concurrency.MainActor(unsafe) public var store: PSDKUIKit.PSDKTextFieldStore<State> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var $store: SwiftUI.ObservedObject<PSDKUIKit.PSDKTextFieldStore<State>>.Wrapper {
    get
  }
  @_Concurrency.MainActor(unsafe) public var startView: SwiftUI.AnyView?
  @_Concurrency.MainActor(unsafe) public var endView: SwiftUI.AnyView?
  @_Concurrency.MainActor(unsafe) public init(_ store: PSDKUIKit.PSDKTextFieldStore<State>, _ attributes: PSDKUIKit.PSDKTextFieldAttributes, _ messages: PSDKUIKit.PSDKTextFieldMessages = .init(), handler: PSDKUIKit.PSDKTextValidationHandler? = nil, onChanged: ((Swift.String) -> Swift.Void)? = nil, onSubmit: ((PSDKUIKit.PSDKValidationResult) -> Swift.Void)? = nil)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit13PSDKFieldBasePAAE4bodyQrvp", 0) __<PSDKUIKit.PSDKTextFieldGeneral<State>>
  public typealias Field = SwiftUI.TextField<SwiftUI.Text>
  public typealias Store = PSDKUIKit.PSDKTextFieldStore<State>
}
public enum TFConstants {
  public static let emailFormatRegex: Swift.String
  public static let phoneFormatRegex: Swift.String
  public static let phoneMinCount: Swift.Int
  public static let phoneMaxCount: Swift.Int
}
public protocol PSDKTextFieldBase : PSDKUIKit.PSDKFieldBase where Self.Field == SwiftUI.TextField<SwiftUI.Text> {
}
extension PSDKUIKit.PSDKTextFieldBase {
  public var field: SwiftUI.TextField<SwiftUI.Text> {
    get
  }
}
public protocol PSDKSecureState : PSDKUIKit.PSDKTFState {
  var hidePassword: Swift.Bool { get set }
}
@_Concurrency.MainActor(unsafe) public struct PSDKSecureFieldBase<StateType> : PSDKUIKit.PSDKFieldBase where StateType : PSDKUIKit.PSDKSecureState {
  @SwiftUI.ObservedObject @_projectedValueProperty($store) @_Concurrency.MainActor(unsafe) public var store: PSDKUIKit.PSDKTextFieldStore<StateType> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var $store: SwiftUI.ObservedObject<PSDKUIKit.PSDKTextFieldStore<StateType>>.Wrapper {
    get
  }
  @SwiftUI.Environment @_Concurrency.MainActor(unsafe) public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @SwiftUI.Environment @_Concurrency.MainActor(unsafe) public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @_Concurrency.MainActor(unsafe) public var startView: SwiftUI.AnyView?
  @_Concurrency.MainActor(unsafe) public var endView: SwiftUI.AnyView?
  @_Concurrency.MainActor(unsafe) public var field: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(store: PSDKUIKit.PSDKTextFieldStore<StateType>)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit13PSDKFieldBasePAAE4bodyQrvp", 0) __<PSDKUIKit.PSDKSecureFieldBase<StateType>>
  public typealias Field = @_opaqueReturnTypeOf("$s9PSDKUIKit19PSDKSecureFieldBaseV5fieldQrvp", 0) __<StateType>
  public typealias Store = PSDKUIKit.PSDKTextFieldStore<StateType>
}
@_Concurrency.MainActor(unsafe) public struct PSDKSecureField<StateType> : SwiftUI.View where StateType : PSDKUIKit.PSDKSecureState {
  @SwiftUI.ObservedObject @_projectedValueProperty($store) @_Concurrency.MainActor(unsafe) public var store: PSDKUIKit.PSDKTextFieldStore<StateType> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var $store: SwiftUI.ObservedObject<PSDKUIKit.PSDKTextFieldStore<StateType>>.Wrapper {
    get
  }
  @SwiftUI.Environment @_Concurrency.MainActor(unsafe) public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @SwiftUI.Environment @_Concurrency.MainActor(unsafe) public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(store: PSDKUIKit.PSDKTextFieldStore<StateType>)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit15PSDKSecureFieldV4bodyQrvp", 0) __<StateType>
}
public protocol ErrorViewProvider : SwiftUI.View {
  func withMessages(_ messages: PSDKUIKit.PSDKTextFieldMessages) -> Self
  func withAttributes(_ attributes: PSDKUIKit.PSDKTextFieldAttributes) -> Self
}
public protocol PSDKFieldBase : PSDKUIKit.ErrorViewProvider {
  associatedtype Field : SwiftUI.View
  associatedtype Store : PSDKUIKit.PSDKTextFieldStoreProtocol
  var store: Self.Store { get }
  var field: Self.Field { get }
  var contentBody: SwiftUI.AnyView { get }
  var theme: any PSDKUIKit.PSDKThemeProvider { get }
  var style: PSDKUIKit.PSDKStyle { get }
  var showHint: Swift.Bool { get }
  var placeHolderView: SwiftUI.AnyView { get }
  var startView: SwiftUI.AnyView? { get set }
  var endView: SwiftUI.AnyView? { get set }
  var startViewModifier: SwiftUI.AnyView? { get }
  var endViewModifier: SwiftUI.AnyView? { get }
  func getEndView() -> SwiftUI.AnyView?
  func getStartView() -> SwiftUI.AnyView?
}
extension PSDKUIKit.PSDKFieldBase {
  public var attributes: PSDKUIKit.PSDKTextFieldAttributes {
    get
    set
  }
  public var messages: PSDKUIKit.PSDKTextFieldMessages {
    get
    set
  }
  public var onSubmit: ((PSDKUIKit.PSDKValidationResult) -> Swift.Void)? {
    get
    set
  }
  public var handler: PSDKUIKit.PSDKTextValidationHandler? {
    get
    set
  }
  public var onChanged: ((Swift.String) -> Swift.Void)? {
    get
    set
  }
  public var showHint: Swift.Bool {
    get
  }
  public var errorMessage: Swift.String? {
    get
  }
  public var lineWidth: CoreFoundation.CGFloat {
    get
  }
  public var startViewModifier: SwiftUI.AnyView? {
    get
  }
  public var endViewModifier: SwiftUI.AnyView? {
    get
  }
  public var errorMessageView: SwiftUI.AnyView? {
    get
  }
  public var placeHolderView: SwiftUI.AnyView {
    get
  }
  public var textField: some SwiftUI.View {
    get
  }
  public var contentBody: SwiftUI.AnyView {
    get
  }
  public var body: some SwiftUI.View {
    get
  }
  public func submit(_ showError: Swift.Bool = true)
  public func getEndView() -> SwiftUI.AnyView?
  public func getStartView() -> SwiftUI.AnyView?
}
public protocol PSDKGlobalTextField : PSDKUIKit.PSDKTextFieldBase {
}
extension PSDKUIKit.PSDKGlobalTextField {
  public func getEndView() -> SwiftUI.AnyView?
}
extension CoreImage.CIImage {
  public var cgImage: CoreGraphics.CGImage? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@_Concurrency.MainActor(unsafe) public class PSDKIntrospectionUIView : UIKit.UIView {
  @objc deinit
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
public struct PSDKUIKitIntrospectionView<TargetViewType> : SwiftUI.UIViewRepresentable where TargetViewType : UIKit.UIView {
  public init(selector: @escaping (PSDKUIKit.PSDKIntrospectionUIView) -> TargetViewType?, customize: @escaping (TargetViewType) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: SwiftUI.UIViewRepresentableContext<PSDKUIKit.PSDKUIKitIntrospectionView<TargetViewType>>) -> PSDKUIKit.PSDKIntrospectionUIView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: PSDKUIKit.PSDKIntrospectionUIView, context: SwiftUI.UIViewRepresentableContext<PSDKUIKit.PSDKUIKitIntrospectionView<TargetViewType>>)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = PSDKUIKit.PSDKIntrospectionUIView
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func loadNib() -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) public class func fromNib<T>() -> T where T : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func rotate(duration: Swift.Double = 2.0)
  @_Concurrency.MainActor(unsafe) public func stopRotating()
  @_Concurrency.MainActor(unsafe) public var parentViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) public func displayTooltip(show: Swift.Bool = true, _ message: Swift.String, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func displayLeadingTooltip(show: Swift.Bool = true, _ message: Swift.String, completion: (() -> Swift.Void)? = nil)
}
extension SwiftUI.Image {
  public static var psdkWorldCountries: SwiftUI.Image {
    get
  }
  public static var psdkCapture: SwiftUI.Image {
    get
  }
  public static var psdkFailedAttempts: SwiftUI.Image {
    get
  }
  public static var psdkReadyScan: SwiftUI.Image {
    get
  }
  public static var psdkFlashOn: SwiftUI.Image {
    get
  }
  public static var psdkFlashOff: SwiftUI.Image {
    get
  }
  public static var psdkScanBack: SwiftUI.Image {
    get
  }
  public static var psdkScanFront: SwiftUI.Image {
    get
  }
  public static var psdkReadyScanSelfie: SwiftUI.Image {
    get
  }
  public static var psdkRibbons: SwiftUI.Image {
    get
  }
  public static var psdkReadyScanRfid: SwiftUI.Image {
    get
  }
}
public struct PSDKTextFieldStyle {
}
extension Foundation.NSAttributedString {
  public var stringsWithAttributes: [PSDKUIKit.PSDKStringWithAttributes] {
    get
  }
}
public struct PSDKLabelButton : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(text: Swift.String, textHighLigth: Swift.String, action: @escaping () -> Swift.Void)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit15PSDKLabelButtonV4bodyQrvp", 0) __
}
public protocol ActionSheetState {
  var size: PSDKUIKit.ActionSheetSize { get set }
  var contentHeight: CoreFoundation.CGFloat? { get set }
}
public protocol ActionSheetDispatcher : Combine.ObservableObject {
  associatedtype StateType : PSDKUIKit.ActionSheetState
  var state: Self.StateType { get }
  var customDismiss: (() -> Swift.Void)? { get }
  func setSize(newSize: PSDKUIKit.ActionSheetSize)
  func setContentHeight(newHeight: CoreFoundation.CGFloat?)
}
public struct BasicActionSheetState : PSDKUIKit.ActionSheetState {
  public var contentHeight: CoreFoundation.CGFloat?
  public var size: PSDKUIKit.ActionSheetSize
  public init(size: PSDKUIKit.ActionSheetSize, contentHeight: CoreFoundation.CGFloat? = nil)
}
public class PSDKActionSheetStore<StateType> : PSDKUIKit.ActionSheetDispatcher where StateType : PSDKUIKit.ActionSheetState {
  @Combine.Published @_projectedValueProperty($state) public var state: StateType {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $state: Combine.Published<StateType>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  open var customDismiss: (() -> Swift.Void)?
  public init(state: StateType = BasicActionSheetState(size: .middle))
  public func setSize(newSize: PSDKUIKit.ActionSheetSize)
  public func setContentHeight(newHeight: CoreFoundation.CGFloat?)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_inheritsConvenienceInitializers public class ActionSheetStore : PSDKUIKit.PSDKActionSheetStore<PSDKUIKit.BasicActionSheetState> {
  override public init(state: PSDKUIKit.BasicActionSheetState = super)
  @objc deinit
}
public protocol PSDKActionSheetBase : SwiftUI.View {
  associatedtype SheetStore : PSDKUIKit.ActionSheetDispatcher
  var theme: any PSDKUIKit.PSDKThemeProvider { get }
  var style: PSDKUIKit.PSDKStyle { get }
  var sheetStore: Self.SheetStore { get set }
  var isLoading: Swift.Bool { get }
  var leftButtonText: Swift.String? { get }
  var rightButtonText: Swift.String? { get }
  var leftButtonStyle: PSDKUIKit.PSDKButtonStyle { get }
  var rightButtonStyle: PSDKUIKit.PSDKButtonStyle { get }
  var leftButtonDissabled: Swift.Bool { get }
  var rightButtonDissabled: Swift.Bool { get }
  var title: Swift.String? { get }
  var subtitle: Swift.String? { get }
  var description: Swift.String? { get }
  var background: SwiftUI.AnyView { get }
  var titleView: SwiftUI.AnyView? { get }
  var subtitleView: PSDKUIKit.PSDKText? { get }
  var titleHeaderView: SwiftUI.AnyView? { get }
  var descriptionView: SwiftUI.AnyView? { get }
  var contentBody: SwiftUI.AnyView? { get }
  var shouldDismiss: Swift.Bool { get }
  var canDrag: Swift.Bool { get }
  var buttonsView: SwiftUI.AnyView? { get }
  var leftButton: SwiftUI.AnyView? { get }
  var rightButton: SwiftUI.AnyView? { get }
  var loadingView: SwiftUI.AnyView? { get }
  func leftButtonAction()
  func rightButtonAction()
}
extension PSDKUIKit.PSDKActionSheetBase {
  public var shouldDismiss: Swift.Bool {
    get
  }
  public var canDrag: Swift.Bool {
    get
  }
  public var isLoading: Swift.Bool {
    get
  }
  public var leftButtonText: Swift.String? {
    get
  }
  public var rightButtonText: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var subtitle: Swift.String? {
    get
  }
  public var description: Swift.String? {
    get
  }
  public var showInstructionsView: Swift.Bool {
    get
  }
  public var showLeftButton: Swift.Bool {
    get
  }
  public var showRightButton: Swift.Bool {
    get
  }
  public var leftButtonStyle: PSDKUIKit.PSDKButtonStyle {
    get
  }
  public var rightButtonStyle: PSDKUIKit.PSDKButtonStyle {
    get
  }
  public var defaultTitle: PSDKUIKit.PSDKText? {
    get
  }
  public var titleView: SwiftUI.AnyView? {
    get
  }
  public var defaultSubtitleView: PSDKUIKit.PSDKText? {
    get
  }
  public var subtitleView: PSDKUIKit.PSDKText? {
    get
  }
  public var descriptionView: SwiftUI.AnyView? {
    get
  }
  public var bodyDefault: SwiftUI.AnyView? {
    get
  }
  public var contentBody: SwiftUI.AnyView? {
    get
  }
  public var leftButtonDissabled: Swift.Bool {
    get
  }
  public var rightButtonDissabled: Swift.Bool {
    get
  }
  public var background: SwiftUI.AnyView {
    get
  }
  public var topSpacing: CoreFoundation.CGFloat {
    get
  }
  public var loadingView: SwiftUI.AnyView? {
    get
  }
  public var defaultTitleHeader: some SwiftUI.View {
    get
  }
  public var titleHeaderView: SwiftUI.AnyView? {
    get
  }
  public var height: CoreFoundation.CGFloat {
    get
  }
  public var showButtons: Swift.Bool {
    get
  }
  public var buttonsView: SwiftUI.AnyView? {
    get
  }
  public var leftButton: SwiftUI.AnyView? {
    get
  }
  public var rightButton: SwiftUI.AnyView? {
    get
  }
  public var body: some SwiftUI.View {
    get
  }
  public func leftButtonAction()
  public func rightButtonAction()
}
@_Concurrency.MainActor(unsafe) public struct PSDKActionSheetContainer<Content> : SwiftUI.View where Content : PSDKUIKit.PSDKActionSheetBase {
  public enum DragDirection {
    case bottom, top
    public static func == (a: PSDKUIKit.PSDKActionSheetContainer<Content>.DragDirection, b: PSDKUIKit.PSDKActionSheetContainer<Content>.DragDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(_ content: Content)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit24PSDKActionSheetContainerV4bodyQrvp", 0) __<Content>
}
extension Foundation.FileManager {
  public static func documentDirectory() -> Foundation.URL
  public static func getFileUrlDD(fileName: Swift.String) -> Foundation.URL
}
public struct PSDKStringWithAttributes : Swift.Hashable, Swift.Identifiable {
  public let id: Foundation.UUID
  public static func == (lhs: PSDKUIKit.PSDKStringWithAttributes, rhs: PSDKUIKit.PSDKStringWithAttributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public init(string: Swift.String, attrs: [Foundation.NSAttributedString.Key : Any])
  public typealias ID = Foundation.UUID
  public var hashValue: Swift.Int {
    get
  }
}
public struct PSDKHyperlinkText : SwiftUI.View {
  public init(strings: [PSDKUIKit.PSDKStringWithAttributes], font: SwiftUI.Font = .psdkF14)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit17PSDKHyperlinkTextV4bodyQrvp", 0) __
}
public struct PSDKCountryModel : Swift.Decodable, PSDKUIKit.PSDKIdentifiable {
  public var id: Foundation.UUID
  public let flag: Swift.String
  public let ic: Swift.String
  public let country: Swift.String
  public let code: Swift.String
  public var findItem: Swift.Bool
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case flag, country, code, ic
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public var description: Swift.String {
    get
  }
  public init(ic: Swift.String)
  public init(flag: Swift.String, ic: Swift.String, country: Swift.String, code: Swift.String)
  public static func == (lhs: PSDKUIKit.PSDKCountryModel, rhs: PSDKUIKit.PSDKCountryModel) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor(unsafe) public struct PSDKTextFieldCalendar<S> : SwiftUI.View where S : PSDKUIKit.PSDKTFState {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(_ store: PSDKUIKit.PSDKTextFieldStore<S>, hint: Swift.String)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit21PSDKTextFieldCalendarV4bodyQrvp", 0) __<S>
}
public struct PSDKButtonStyle {
  public enum Size {
    case auto, small, regular, large
    public static func == (a: PSDKUIKit.PSDKButtonStyle.Size, b: PSDKUIKit.PSDKButtonStyle.Size) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ButtonType {
    case primary, secondary
    public static func == (a: PSDKUIKit.PSDKButtonStyle.ButtonType, b: PSDKUIKit.PSDKButtonStyle.ButtonType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(type: PSDKUIKit.PSDKButtonStyle.ButtonType = .primary, size: PSDKUIKit.PSDKButtonStyle.Size = .regular, foregroundColor: (any PSDKUIKit.PSDKColorProvider)? = nil, disableForegroundColor: (any PSDKUIKit.PSDKColorProvider)? = nil, backgroundColor: (any PSDKUIKit.PSDKColorProvider)? = nil, disabledBackgroundColor: (any PSDKUIKit.PSDKColorProvider)? = nil, isRounded: Swift.Bool = true, numberOfLines: Swift.Int? = 1)
}
public struct PSDKThemeKey : SwiftUI.EnvironmentKey {
  public static let defaultValue: any PSDKUIKit.PSDKThemeProvider
  public typealias Value = any PSDKUIKit.PSDKThemeProvider
}
public struct PSDKStyleKey : SwiftUI.EnvironmentKey {
  public static let defaultValue: PSDKUIKit.PSDKStyle
  public typealias Value = PSDKUIKit.PSDKStyle
}
extension SwiftUI.EnvironmentValues {
  public var style: PSDKUIKit.PSDKStyle {
    get
    set
  }
  public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
    set
  }
}
extension SwiftUI.View {
  public func applyTheme(theme: any PSDKUIKit.PSDKThemeProvider, style: PSDKUIKit.PSDKStyle? = nil) -> some SwiftUI.View
  
}
public struct PSDKCheckBoxView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(checked: SwiftUI.Binding<Swift.Bool>)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit16PSDKCheckBoxViewV4bodyQrvp", 0) __
}
public struct PSDKRoundedCorner : SwiftUI.Shape {
  public func path(in rect: CoreFoundation.CGRect) -> SwiftUI.Path
  public init(radius: CoreFoundation.CGFloat = .infinity, corners: UIKit.UIRectCorner = .allCorners)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<PSDKUIKit.PSDKRoundedCorner, SwiftUI.ForegroundStyle>
}
public struct PSDKToast : SwiftUI.ViewModifier {
  public static let short: Swift.Double
  public static let long: Swift.Double
  @_Concurrency.MainActor(unsafe) public func body(content: PSDKUIKit.PSDKToast.Content) -> some SwiftUI.View
  
  public struct PSDKConfig {
    public init(textColor: SwiftUI.Color = .white, font: SwiftUI.Font = .system(size: 14), backgroundColor: SwiftUI.Color = .black.opacity(0.588), duration: Foundation.TimeInterval = PSDKToast.short, transition: SwiftUI.AnyTransition = .opacity, animation: SwiftUI.Animation = .linear(duration: 0.3))
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit9PSDKToastV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
extension SwiftUI.View {
  public func toast(message: Swift.String, isShowing: SwiftUI.Binding<Swift.Bool>, config: PSDKUIKit.PSDKToast.PSDKConfig) -> some SwiftUI.View
  
  public func toast(message: Swift.String, isShowing: SwiftUI.Binding<Swift.Bool>, duration: Foundation.TimeInterval) -> some SwiftUI.View
  
}
public enum PSDKLottieName : Swift.String {
  case beginning
  case start
  case identityCongratulations
  case scanDocumentFrontBack
  case login
  case alertCancel
  case timeout
  case congratulations
  case moveYourFace
  case moveYourFaceStop
  case loadingProcessing
  case preloader
  case loadingScreen
  case scanFace
  case moveYourFaceLeft
  case moveYourFaceRight
  case centerYourFace
  case rotateMobile
  case waveVoice
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PSDKLottieView : SwiftUI.UIViewRepresentable {
  public init(_ animationName: PSDKUIKit.PSDKLottieName, loopMode: Lottie.LottieLoopMode = .loop, completion: Lottie.LottieCompletionBlock? = nil, isPlaying: Swift.Bool? = nil)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: PSDKUIKit.PSDKLottieView.Context) -> some UIKit.UIView
  
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: @_opaqueReturnTypeOf("$s9PSDKUIKit14PSDKLottieViewV10makeUIView7contextQr7SwiftUI0E20RepresentableContextVyACG_tF", 0) __, context: PSDKUIKit.PSDKLottieView.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = @_opaqueReturnTypeOf("$s9PSDKUIKit14PSDKLottieViewV10makeUIView7contextQr7SwiftUI0E20RepresentableContextVyACG_tF", 0) __
}
public struct PSDKTipsView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(model: PSDKUIKit.PSDKInstructionModel, startIndex: Swift.Int = 0)
  public init?(model: PSDKUIKit.PSDKInstructionModel?, startIndex: Swift.Int = 0)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit12PSDKTipsViewV4bodyQrvp", 0) __
}
public struct PSDKInstructionModel {
  public init(instructions: [Swift.String], showTrailingIcon: Swift.Bool = true, style: PSDKUIKit.PSDKInstructionModel.Style = .init())
  public struct Style {
    public init(textColor: PSDKUIKit.PSDKColor = .onSurfaceDark, titleFont: SwiftUI.Font = .psdkB18)
  }
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
extension SwiftUI.View {
  public func inject<SomeView>(_ view: SomeView) -> some SwiftUI.View where SomeView : SwiftUI.View
  
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
extension SwiftUI.View {
  public func introspect<TargetView>(selector: @escaping (PSDKUIKit.PSDKIntrospectionUIView) -> TargetView?, customize: @escaping (TargetView) -> ()) -> some SwiftUI.View where TargetView : UIKit.UIView
  
  public func introspectNavigationController(customize: @escaping (UIKit.UINavigationController) -> ()) -> some SwiftUI.View
  
  public func introspectSplitViewController(customize: @escaping (UIKit.UISplitViewController) -> ()) -> some SwiftUI.View
  
  public func introspectViewController(customize: @escaping (UIKit.UIViewController) -> ()) -> some SwiftUI.View
  
  public func introspectTabBarController(customize: @escaping (UIKit.UITabBarController) -> ()) -> some SwiftUI.View
  
  public func introspectTableView(customize: @escaping (UIKit.UITableView) -> ()) -> some SwiftUI.View
  
  public func introspectTableViewCell(customize: @escaping (UIKit.UITableViewCell) -> ()) -> some SwiftUI.View
  
  public func introspectScrollView(customize: @escaping (UIKit.UIScrollView) -> ()) -> some SwiftUI.View
  
  public func introspectTextField(customize: @escaping (UIKit.UITextField) -> ()) -> some SwiftUI.View
  
  public func introspectTextView(customize: @escaping (UIKit.UITextView) -> ()) -> some SwiftUI.View
  
  @available(tvOS, unavailable)
  public func introspectSwitch(customize: @escaping (UIKit.UISwitch) -> ()) -> some SwiftUI.View
  
  @available(tvOS, unavailable)
  public func introspectSlider(customize: @escaping (UIKit.UISlider) -> ()) -> some SwiftUI.View
  
  @available(tvOS, unavailable)
  public func introspectStepper(customize: @escaping (UIKit.UIStepper) -> ()) -> some SwiftUI.View
  
  @available(tvOS, unavailable)
  public func introspectDatePicker(customize: @escaping (UIKit.UIDatePicker) -> ()) -> some SwiftUI.View
  
  public func introspectSegmentedControl(customize: @escaping (UIKit.UISegmentedControl) -> ()) -> some SwiftUI.View
  
  @available(iOS 14.0, *)
  @available(tvOS, unavailable)
  public func introspectColorWell(customize: @escaping (UIKit.UIColorWell) -> ()) -> some SwiftUI.View
  
}
public struct PSDKTabBarButton : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(icon: SwiftUI.Image, isSelected: SwiftUI.Binding<Swift.Bool>)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit16PSDKTabBarButtonV4bodyQrvp", 0) __
}
public struct PSDKDateTextFieldWrapped : SwiftUI.UIViewRepresentable {
  public init(text: SwiftUI.Binding<Swift.String>, isFocused: SwiftUI.Binding<Swift.Bool>, placeholder: Swift.String, style: PSDKUIKit.PSDKTextFieldStyle, locale: Foundation.Locale, isAutomaticSelection: Swift.Bool, didChangeDate: @escaping (Foundation.Date) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: PSDKUIKit.PSDKDateTextFieldWrapped.Context) -> UIKit.UITextField
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: UIKit.UITextField, context: PSDKUIKit.PSDKDateTextFieldWrapped.Context)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> PSDKUIKit.PSDKDateTextFieldWrapped.Coordinator
  public typealias Body = Swift.Never
  public typealias UIViewType = UIKit.UITextField
}
extension PSDKUIKit.PSDKDateTextFieldWrapped {
  @objc @_Concurrency.MainActor(unsafe) public class Coordinator : ObjectiveC.NSObject, UIKit.UITextFieldDelegate {
    @_Concurrency.MainActor(unsafe) public init(parent: PSDKUIKit.PSDKDateTextFieldWrapped)
    @_Concurrency.MainActor(unsafe) @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
    @_Concurrency.MainActor(unsafe) @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
    @objc deinit
  }
}
public struct PSDKCircularProgressBar : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(progress: SwiftUI.Binding<CoreFoundation.CGFloat>, duration: CoreFoundation.CGFloat, barColor: any PSDKUIKit.PSDKColorProvider)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit23PSDKCircularProgressBarV4bodyQrvp", 0) __
}
public struct PSDKAnimationCompletionObserverModifier<Value> : SwiftUI.AnimatableModifier where Value : SwiftUI.VectorArithmetic {
  public var animatableData: Value {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func body(content: PSDKUIKit.PSDKAnimationCompletionObserverModifier<Value>.Content) -> some SwiftUI.View
  
  public typealias AnimatableData = Value
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit39PSDKAnimationCompletionObserverModifierV4body7contentQr7SwiftUI05_ViewE8_ContentVyACyxGG_tF", 0) __<Value>
}
extension UIKit.UIImage {
  public func toBase64() -> Swift.String?
  public static var psdkWorldCountries: UIKit.UIImage {
    get
  }
  public static var psdkCapture: UIKit.UIImage {
    get
  }
  public static var psdkFailedAttempts: UIKit.UIImage {
    get
  }
  public static var psdkReadyScan: UIKit.UIImage {
    get
  }
  public static var psdkFlashOff: UIKit.UIImage {
    get
  }
  public static var psdkFlashOn: UIKit.UIImage {
    get
  }
  public static var psdkScanBack: UIKit.UIImage {
    get
  }
  public static var psdkScanFront: UIKit.UIImage {
    get
  }
  public static var psdkReadyScanSelfie: UIKit.UIImage {
    get
  }
  public static var psdkRibbons: UIKit.UIImage {
    get
  }
  public static var psdkReadyScanRfid: UIKit.UIImage {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct PSDKEmailTextField<EState> : PSDKUIKit.PSDKGlobalTextField where EState : PSDKUIKit.PSDKTFState {
  @SwiftUI.ObservedObject @_projectedValueProperty($store) @_Concurrency.MainActor(unsafe) public var store: PSDKUIKit.PSDKTextFieldStore<EState> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var $store: SwiftUI.ObservedObject<PSDKUIKit.PSDKTextFieldStore<EState>>.Wrapper {
    get
  }
  @SwiftUI.Environment @_Concurrency.MainActor(unsafe) public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @SwiftUI.Environment @_Concurrency.MainActor(unsafe) public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @_Concurrency.MainActor(unsafe) public var startView: SwiftUI.AnyView?
  @_Concurrency.MainActor(unsafe) public var endView: SwiftUI.AnyView?
  @_Concurrency.MainActor(unsafe) public init(store: PSDKUIKit.PSDKTextFieldStore<EState>, hint: Swift.String, isEditable: Swift.Bool = true, isRequired: Swift.Bool = false)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit13PSDKFieldBasePAAE4bodyQrvp", 0) __<PSDKUIKit.PSDKEmailTextField<EState>>
  public typealias Field = SwiftUI.TextField<SwiftUI.Text>
  public typealias Store = PSDKUIKit.PSDKTextFieldStore<EState>
}
@_Concurrency.MainActor(unsafe) public struct PSDKCountryTextField<CTState> : PSDKUIKit.PSDKChooseTextField where CTState : PSDKUIKit.PSDKCountryState {
  @SwiftUI.Environment @_Concurrency.MainActor(unsafe) public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @SwiftUI.Environment @_Concurrency.MainActor(unsafe) public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @SwiftUI.ObservedObject @_projectedValueProperty($store) @_Concurrency.MainActor(unsafe) public var store: PSDKUIKit.PSDKChooseStore<CTState> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var $store: SwiftUI.ObservedObject<PSDKUIKit.PSDKChooseStore<CTState>>.Wrapper {
    get
  }
  @_Concurrency.MainActor(unsafe) public var endView: SwiftUI.AnyView?
  @_Concurrency.MainActor(unsafe) public var startView: SwiftUI.AnyView?
  @_Concurrency.MainActor(unsafe) public var modalRouter: PSDKUIKit.PSDKModalRouter
  @_Concurrency.MainActor(unsafe) public let modalHint: Swift.String
  @_Concurrency.MainActor(unsafe) public func dropdownElement(_ item: PSDKUIKit.PSDKCountryTextField<CTState>.Item) -> PSDKUIKit.PSDKDropdownOptionElement<PSDKUIKit.PSDKCountryTextField<CTState>.Item>
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(_ store: PSDKUIKit.PSDKChooseStore<CTState>, hint: Swift.String, isRequired: Swift.Bool = false, modalHint: Swift.String = "", modalRouter: PSDKUIKit.PSDKModalRouter, handler: PSDKUIKit.PSDKTextValidationHandler? = nil)
  @_Concurrency.MainActor(unsafe) public func getStartView() -> SwiftUI.AnyView?
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit20PSDKCountryTextFieldV4bodyQrvp", 0) __<CTState>
  public typealias Field = SwiftUI.TextField<SwiftUI.Text>
  public typealias Store = PSDKUIKit.PSDKChooseStore<CTState>
}
public struct PSDKInstructionItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(position: Swift.Int, description: Swift.String, content: SwiftUI.AnyView? = nil)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit19PSDKInstructionItemV4bodyQrvp", 0) __
}
extension UIKit.UIImage {
  public static var psdkEmail: UIKit.UIImage {
    get
  }
  public static var psdkWeb: UIKit.UIImage {
    get
  }
  public static var psdkNavigationClose: UIKit.UIImage {
    get
  }
  public static var psdkNavigationCloseLight: UIKit.UIImage {
    get
  }
  public static var psdkNavigationBackButton: UIKit.UIImage {
    get
  }
  public static var psdkNavigationBackButtonLight: UIKit.UIImage {
    get
  }
  public static var locationOnActive: UIKit.UIImage {
    get
  }
  public static var arrowDropUpBlack: UIKit.UIImage {
    get
  }
  public static var arrowDropDownBlack: UIKit.UIImage {
    get
  }
  public static var arrowDropDown: UIKit.UIImage {
    get
  }
  public static var arrowDropUp: UIKit.UIImage {
    get
  }
  public static var personActive: UIKit.UIImage {
    get
  }
  public static var calendarTodayActive: UIKit.UIImage {
    get
  }
  public static var iconSearch: UIKit.UIImage {
    get
  }
  public static var done: UIKit.UIImage {
    get
  }
  public static var psdkEditIcon: UIKit.UIImage {
    get
  }
  public static var regulaIcon: UIKit.UIImage {
    get
  }
  public static var psdkMoreVert: UIKit.UIImage {
    get
  }
  public static var psdkDelete: UIKit.UIImage {
    get
  }
  public static var psdkHelpIcon: UIKit.UIImage {
    get
  }
  public static var psdkDangerRedIcon: UIKit.UIImage {
    get
  }
  public static var psdkError: UIKit.UIImage {
    get
  }
  public static var psdkInfoError: UIKit.UIImage {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct PSDKTextField<PTState> : PSDKUIKit.PSDKGlobalTextField where PTState : PSDKUIKit.PSDKTFState {
  @SwiftUI.ObservedObject @_projectedValueProperty($store) @_Concurrency.MainActor(unsafe) public var store: PSDKUIKit.PSDKTextFieldStore<PTState> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var $store: SwiftUI.ObservedObject<PSDKUIKit.PSDKTextFieldStore<PTState>>.Wrapper {
    get
  }
  @SwiftUI.Environment @_Concurrency.MainActor(unsafe) public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @SwiftUI.Environment @_Concurrency.MainActor(unsafe) public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @_Concurrency.MainActor(unsafe) public var startView: SwiftUI.AnyView?
  @_Concurrency.MainActor(unsafe) public var endView: SwiftUI.AnyView?
  @_Concurrency.MainActor(unsafe) public init(store: PSDKUIKit.PSDKTextFieldStore<PTState>, hint: Swift.String, isRequired: Swift.Bool = false)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit13PSDKFieldBasePAAE4bodyQrvp", 0) __<PSDKUIKit.PSDKTextField<PTState>>
  public typealias Field = SwiftUI.TextField<SwiftUI.Text>
  public typealias Store = PSDKUIKit.PSDKTextFieldStore<PTState>
}
extension SwiftUI.Font {
  public static var psdkB48: SwiftUI.Font {
    get
  }
  public static var psdkB50: SwiftUI.Font {
    get
  }
  public static var psdkF50: SwiftUI.Font {
    get
  }
  public static var psdkB42: SwiftUI.Font {
    get
  }
  public static var psdkF42: SwiftUI.Font {
    get
  }
  public static var psdkB38: SwiftUI.Font {
    get
  }
  public static var psdkF38: SwiftUI.Font {
    get
  }
  public static var psdkB32: SwiftUI.Font {
    get
  }
  public static var psdkF32: SwiftUI.Font {
    get
  }
  public static var psdkB28: SwiftUI.Font {
    get
  }
  public static var psdkF26: SwiftUI.Font {
    get
  }
  public static var psdkB26: SwiftUI.Font {
    get
  }
  public static var psdkF24: SwiftUI.Font {
    get
  }
  public static var psdkB24: SwiftUI.Font {
    get
  }
  public static var psdkB20: SwiftUI.Font {
    get
  }
  public static var psdkF20: SwiftUI.Font {
    get
  }
  public static var psdkF18: SwiftUI.Font {
    get
  }
  public static var psdkB18: SwiftUI.Font {
    get
  }
  public static var psdkF16: SwiftUI.Font {
    get
  }
  public static var psdkB16: SwiftUI.Font {
    get
  }
  public static var psdkF15: SwiftUI.Font {
    get
  }
  public static var psdkF14: SwiftUI.Font {
    get
  }
  public static var psdkB14: SwiftUI.Font {
    get
  }
  public static var psdkF12: SwiftUI.Font {
    get
  }
  public static var psdkB12: SwiftUI.Font {
    get
  }
  public static func custom(type: Swift.String, size: CoreFoundation.CGFloat) -> SwiftUI.Font
}
extension UIKit.UIFont {
  public static func loadFonts(titleFont: @escaping () -> PSDKUIKit.Fonts, paragraphFont: @escaping () -> PSDKUIKit.Fonts)
  public static var psdkB48: UIKit.UIFont {
    get
  }
  public static var psdkF48: UIKit.UIFont {
    get
  }
  public static var psdkB32: UIKit.UIFont {
    get
  }
  public static var psdkF32: UIKit.UIFont {
    get
  }
  public static var psdkB28: UIKit.UIFont {
    get
  }
  public static var psdkF28: UIKit.UIFont {
    get
  }
  public static var psdkF26: UIKit.UIFont {
    get
  }
  public static var psdkB26: UIKit.UIFont {
    get
  }
  public static var psdkF24: UIKit.UIFont {
    get
  }
  public static var psdkB24: UIKit.UIFont {
    get
  }
  public static var psdkF20: UIKit.UIFont {
    get
  }
  public static var psdkB20: UIKit.UIFont {
    get
  }
  public static var psdkF18: UIKit.UIFont {
    get
  }
  public static var psdkF16: UIKit.UIFont {
    get
  }
  public static var psdkF14: UIKit.UIFont {
    get
  }
  public static var psdkF12: UIKit.UIFont {
    get
  }
  public static var psdkB12: UIKit.UIFont {
    get
  }
  public var font: SwiftUI.Font {
    get
  }
  public static func custom(name: Swift.String, size: CoreFoundation.CGFloat) -> UIKit.UIFont
}
public enum Fonts : Swift.String {
  case hint
  case arial
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PSDKProgressView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(text: Swift.String? = nil)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit16PSDKProgressViewV4bodyQrvp", 0) __
}
public typealias PSDKTextValidationHandler = (_ text: Swift.String, _ currentStatus: PSDKUIKit.PSDKValidationResult) -> PSDKUIKit.PSDKValidationResult
public enum PSDKValidationResult : Swift.Equatable {
  case none
  case valid
  case invalid(_: Swift.String? = nil)
  case warning
  public static func == (a: PSDKUIKit.PSDKValidationResult, b: PSDKUIKit.PSDKValidationResult) -> Swift.Bool
}
public struct PSDKAccordionView<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(showAccordion: SwiftUI.Binding<Swift.Bool>, title: Swift.String, startIcon: SwiftUI.Image? = Image.psdkHelpIcon, content: @escaping () -> Content)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit17PSDKAccordionViewV4bodyQrvp", 0) __<Content>
}
public struct PSDKText : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init?(_ text: Swift.String?, textColor: PSDKUIKit.PSDKColor = .onSurfaceGray400, font: SwiftUI.Font = .psdkF18, alignment: SwiftUI.TextAlignment = .leading)
  public init?(_ text: Swift.String?, textColor: any PSDKUIKit.PSDKColorProvider = PSDKColor.onSurfaceGray400, font: SwiftUI.Font = .psdkF18, alignment: SwiftUI.TextAlignment = .leading)
  public init(_ text: Swift.String, textColor: PSDKUIKit.PSDKColor = .onSurfaceGray400, font: SwiftUI.Font = .psdkF18, alignment: SwiftUI.TextAlignment = .leading)
  public func foregroundColor(_ color: any PSDKUIKit.PSDKColorProvider) -> PSDKUIKit.PSDKText
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit8PSDKTextV4bodyQrvp", 0) __
}
public struct PSDKContentText : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init?(_ text: Swift.String?, textColor: PSDKUIKit.PSDKColor = .onSurfaceGray400, font: SwiftUI.Font = .psdkF18, alignment: SwiftUI.TextAlignment = .leading)
  public init?(_ text: Swift.String?, textColor: any PSDKUIKit.PSDKColorProvider = PSDKColor.onSurfaceGray400, font: SwiftUI.Font = .psdkF18, alignment: SwiftUI.TextAlignment = .leading)
  public init(_ text: Swift.String, textColor: PSDKUIKit.PSDKColor = .onSurfaceGray400, font: SwiftUI.Font = .psdkF18, alignment: SwiftUI.TextAlignment = .leading)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit15PSDKContentTextV4bodyQrvp", 0) __
}
extension UIKit.UIColor {
  public static func brandAccent(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func brandBackgroundMain(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func brandSecondary(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func onSurfaceLight(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func onSurfaceGray100(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func onSurfaceGray200(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func onSurfaceGray300(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func onSurfaceGray400(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func onSurfaceDark(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func semanticRed(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func semanticYellow(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func semanticGreen(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
}
extension SwiftUI.Color {
  public static func brandBackgroundMain(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUI.Color
  public static func brandSecondary(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUI.Color
  public static func brandAccent(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUI.Color
  public static func onSurfaceGray100(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUI.Color
  public static func onSurfaceGray200(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUI.Color
  public static func onSurfaceGray300(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUI.Color
  public static func onSurfaceGray400(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUI.Color
  public static func onSurfaceDark(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUI.Color
  public static func semanticRed(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUI.Color
  public static func semanticYellow(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUI.Color
  public static func semanticGreen(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUI.Color
  public static func onSurfaceLight(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUI.Color
}
public struct PSDKCircleWindows : SwiftUI.Shape {
  public func path(in rect: CoreFoundation.CGRect) -> SwiftUI.Path
  public init(size: CoreFoundation.CGSize, origin: CoreFoundation.CGPoint)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<PSDKUIKit.PSDKCircleWindows, SwiftUI.ForegroundStyle>
}
@_Concurrency.MainActor(unsafe) public struct PSDKPhoneTextField<PTState> : PSDKUIKit.PSDKChooseTextField where PTState : PSDKUIKit.PSDKCountryState {
  @SwiftUI.ObservedObject @_projectedValueProperty($store) @_Concurrency.MainActor(unsafe) public var store: PSDKUIKit.PSDKChooseStore<PTState> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var $store: SwiftUI.ObservedObject<PSDKUIKit.PSDKChooseStore<PTState>>.Wrapper {
    get
  }
  @SwiftUI.Environment @_Concurrency.MainActor(unsafe) public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @SwiftUI.Environment @_Concurrency.MainActor(unsafe) public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @_Concurrency.MainActor(unsafe) public var endView: SwiftUI.AnyView?
  @_Concurrency.MainActor(unsafe) public let modalHint: Swift.String
  @_Concurrency.MainActor(unsafe) public let modalRouter: PSDKUIKit.PSDKModalRouter
  @_Concurrency.MainActor(unsafe) public var pressMode: PSDKUIKit.PressedMode
  @_Concurrency.MainActor(unsafe) public let showEndView: Swift.Bool
  @_Concurrency.MainActor(unsafe) public let showSharedField: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var startView: SwiftUI.AnyView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func dropdownElement(_ item: PSDKUIKit.PSDKPhoneTextField<PTState>.Item) -> PSDKUIKit.PSDKDropdownOptionElement<PSDKUIKit.PSDKPhoneTextField<PTState>.Item>
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(store: PSDKUIKit.PSDKChooseStore<PTState>, hint: Swift.String, modalHint: Swift.String = "", modalRouter: PSDKUIKit.PSDKModalRouter)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit18PSDKPhoneTextFieldV4bodyQrvp", 0) __<PTState>
  public typealias Field = SwiftUI.TextField<SwiftUI.Text>
  public typealias Store = PSDKUIKit.PSDKChooseStore<PTState>
}
public struct RadioButtonGroups : SwiftUI.View {
  public static let nothing: Swift.Int
  public let labels: [PSDKUIKit.RadioButtonModel]
  public let callback: (Swift.Int) -> ()
  public var selectedID: Foundation.UUID? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(selectedIndex: SwiftUI.Binding<Swift.Int>, labels: [PSDKUIKit.RadioButtonModel], callback: @escaping (Swift.Int) -> ())
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit17RadioButtonGroupsV4bodyQrvp", 0) __
}
public struct RadioButtonModel : Swift.Identifiable {
  public var id: Foundation.UUID
  public let code: Swift.String
  public let description: Swift.String
  public init(_ code: Swift.String, _ description: Swift.String)
  public typealias ID = Foundation.UUID
}
public struct InterrogativeFloatButton : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(action: @escaping () -> Swift.Void)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit24InterrogativeFloatButtonV4bodyQrvp", 0) __
}
public struct PSDKTextFieldAttributes {
  public enum Style {
    case compact
    case normal
    public static func == (a: PSDKUIKit.PSDKTextFieldAttributes.Style, b: PSDKUIKit.PSDKTextFieldAttributes.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let infinity: Swift.Int
  public var font: UIKit.UIFont
  public var hint: Swift.String
  public var formatRegex: Swift.String
  public var editable: Swift.Bool
  public var isRequired: Swift.Bool
  public var minLength: Swift.Int
  public var maxLength: Swift.Int
  public var kerning: CoreFoundation.CGFloat
  public var lineColor: PSDKUIKit.PSDKTextFieldAttributes.Colors?
  public var hintColor: PSDKUIKit.PSDKTextFieldAttributes.Colors?
  public var textColor: PSDKUIKit.PSDKTextFieldAttributes.Colors?
  public var style: PSDKUIKit.PSDKTextFieldAttributes.Style
  public var alignment: SwiftUI.TextAlignment
  public var autocapitalization: UIKit.UITextAutocapitalizationType
  public var keyboardType: UIKit.UIKeyboardType
  public init(font: UIKit.UIFont = .psdkF18, hint: Swift.String = "", editable: Swift.Bool = true, isRequired: Swift.Bool = false, formatRegex: Swift.String = "(?s).*", minLength: Swift.Int = 0, maxLength: Swift.Int = infinity, kerning: CoreFoundation.CGFloat = 0, hintColor: PSDKUIKit.PSDKTextFieldAttributes.Colors? = nil, lineColor: PSDKUIKit.PSDKTextFieldAttributes.Colors? = nil, float: PSDKUIKit.PSDKTextFieldAttributes.Colors? = nil, textColor: PSDKUIKit.PSDKTextFieldAttributes.Colors? = nil, style: PSDKUIKit.PSDKTextFieldAttributes.Style = .normal, alignment: SwiftUI.TextAlignment = .leading, autocapitalization: UIKit.UITextAutocapitalizationType = .sentences, keyboardType: UIKit.UIKeyboardType = .default)
}
extension PSDKUIKit.PSDKTextFieldAttributes {
  public struct Colors {
    public let normal: any PSDKUIKit.PSDKColorProvider
    public let focused: any PSDKUIKit.PSDKColorProvider
    public let error: any PSDKUIKit.PSDKColorProvider
    public init(normal: any PSDKUIKit.PSDKColorProvider, focused: any PSDKUIKit.PSDKColorProvider, error: any PSDKUIKit.PSDKColorProvider)
    public init(color: any PSDKUIKit.PSDKColorProvider)
    public func getColor<Store>(store: Store) -> any PSDKUIKit.PSDKColorProvider where Store : PSDKUIKit.PSDKTextFieldStoreProtocol
  }
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public func endEditing()
}
@_hasMissingDesignatedInitializers public class PSDKApplicationUtil {
  @available(iOSApplicationExtension, unavailable)
  public class func endEditing()
  @objc deinit
}
public protocol PSDKImageProvider {
  var uiImage: UIKit.UIImage { get }
  var image: SwiftUI.Image { get }
}
extension PSDKUIKit.PSDKImageProvider {
  public var image: SwiftUI.Image {
    get
  }
  public var body: PSDKUIKit.PSDKImageView {
    get
  }
  public func foregroundColor(_ color: any PSDKUIKit.PSDKColorProvider) -> PSDKUIKit.PSDKImageView
  public func foregroundColor(_ color: PSDKUIKit.PSDKColor) -> PSDKUIKit.PSDKImageView
  public func setResizable(isResizable: Swift.Bool = true) -> PSDKUIKit.PSDKImageView
}
public enum PSDKImage : Swift.String {
  case icClose
  case icInfo
  case icCheckAccent
  case icWarning
  case icSuccess
  case icPasswordShowed
  case icPasswordHidden
  case icFailMessage
  case icMicrophone
  case icEditButton
  case cornerBorderShape
  case ribbons
  case psdkInfoError
  case icInterrogative
  case icArrowBottomSmall
  case closeInCircle
  case icPreventorButton
  case icChooseFile
  case icPhotoLibrary
  case icTakePhoto
  case circleDashed
  case selfieBackground
  case videoAndVoiceAuth
  case voiceDetection
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension PSDKUIKit.PSDKImage : PSDKUIKit.PSDKImageProvider, SwiftUI.View {
  public var uiImage: UIKit.UIImage {
    get
  }
  public var image: SwiftUI.Image {
    get
  }
  public typealias Body = PSDKUIKit.PSDKImageView
}
public struct PSDKImageView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public func foregroundColor(_ color: PSDKUIKit.PSDKColor) -> PSDKUIKit.PSDKImageView
  public func foregroundColor(_ color: any PSDKUIKit.PSDKColorProvider) -> PSDKUIKit.PSDKImageView
  public func setResizable(isResizable: Swift.Bool = true) -> PSDKUIKit.PSDKImageView
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit13PSDKImageViewV4bodyQrvp", 0) __
}
public struct PSDKExpandableText : SwiftUI.View {
  public init(_ text: Swift.String, lineLimit: Swift.Int = 3, font: UIKit.UIFont = .psdkF14, foregroundColor: any PSDKUIKit.PSDKColorProvider = PSDKColor.onSurfaceGray300, coloredColor: any PSDKUIKit.PSDKColorProvider = PSDKColor.brandAccent, moreMessage: Swift.String = "more", lessMessage: Swift.String = "less")
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit18PSDKExpandableTextV4bodyQrvp", 0) __
}
public protocol PSDKColorProvider {
  var name: Swift.String { get }
  var group: Swift.String { get }
  func uiColor(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  func color(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUI.Color
}
extension PSDKUIKit.PSDKColorProvider {
  public var body: PSDKUIKit.ThemeColorReader {
    get
  }
}
extension PSDKUIKit.PSDKColorProvider {
  public func uiColor(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public func color(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUI.Color
}
public enum PSDKEmpasisColor : Swift.String, PSDKUIKit.PSDKColorProvider, SwiftUI.View {
  public var group: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  case high
  case medium
  case low
  public init?(rawValue: Swift.String)
  public typealias Body = PSDKUIKit.ThemeColorReader
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PSDKTertiaryColor : Swift.String, PSDKUIKit.PSDKColorProvider, SwiftUI.View {
  public var group: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  case purple100
  case purple200
  case purple300
  case purple400
  case purple500
  case pink
  case amber
  case lime
  public init?(rawValue: Swift.String)
  public typealias Body = PSDKUIKit.ThemeColorReader
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PSDKColor : PSDKUIKit.PSDKColorProvider, SwiftUI.View {
  public enum Brand : Swift.String, PSDKUIKit.PSDKColorProvider, SwiftUI.View {
    case backgroundMain
    case secondary
    case accent
    public var name: Swift.String {
      get
    }
    public var group: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias Body = PSDKUIKit.ThemeColorReader
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Surface : Swift.String, PSDKUIKit.PSDKColorProvider, SwiftUI.View {
    case gray0
    case gray100
    case gray200
    case gray300
    case gray400
    public var name: Swift.String {
      get
    }
    public var group: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias Body = PSDKUIKit.ThemeColorReader
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var name: Swift.String {
    get
  }
  public var group: Swift.String {
    get
  }
  case brandBackgroundMain
  case brandSecondary
  case brandAccent
  case onSurfaceGray100
  case onSurfaceGray200
  case onSurfaceGray300
  case onSurfaceGray400
  case onSurfaceDark
  case semanticRed
  case semanticYellow
  case semanticGreen
  case onSurfaceLight
  public static func == (a: PSDKUIKit.PSDKColor, b: PSDKUIKit.PSDKColor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias Body = PSDKUIKit.ThemeColorReader
  public var hashValue: Swift.Int {
    get
  }
}
extension CoreFoundation.CGPoint {
  public func distanceTo(_ point: CoreFoundation.CGPoint) -> Swift.Double
  public func rotate(aroundOrigin origin: CoreFoundation.CGPoint, byDegrees: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  public func createVector(_ point: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
}
public protocol PSDKChooseTextField : PSDKUIKit.PSDKTextFieldBase where Self.Store : PSDKUIKit.ChooseStore {
  typealias Item = Self.Store.Item
  var showEndView: Swift.Bool { get }
  var modalHint: Swift.String { get }
  var modalRouter: PSDKUIKit.PSDKModalRouter { get }
  var pressMode: PSDKUIKit.PressedMode { get }
  var showSharedField: Swift.Bool { get }
  func dropdownElement(_ item: Self.Item) -> PSDKUIKit.PSDKDropdownOptionElement<Self.Item>
}
extension PSDKUIKit.PSDKChooseTextField {
  public var startViewModifier: SwiftUI.AnyView? {
    get
  }
  public var endViewModifier: SwiftUI.AnyView? {
    get
  }
  public var showEndView: Swift.Bool {
    get
  }
  public var modalHint: Swift.String {
    get
  }
  public var pressMode: PSDKUIKit.PressedMode {
    get
  }
  public var showSharedField: Swift.Bool {
    get
  }
  public var chooseContentBody: some SwiftUI.View {
    get
  }
  public var body: some SwiftUI.View {
    get
  }
}
public typealias PlatformView = UIKit.UIView
public typealias PlatformViewController = UIKit.UIViewController
public enum Introspect {
  public static func findChild<AnyViewType>(ofType type: AnyViewType.Type, in root: PSDKUIKit.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func findChild<AnyViewControllerType>(ofType type: AnyViewControllerType.Type, in root: PSDKUIKit.PlatformViewController) -> AnyViewControllerType? where AnyViewControllerType : UIKit.UIViewController
  public static func findChildUsingFrame<AnyViewType>(ofType type: AnyViewType.Type, in root: PSDKUIKit.PlatformView, from originalEntry: PSDKUIKit.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func previousSibling<AnyViewType>(containing type: AnyViewType.Type, from entry: PSDKUIKit.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func previousSibling<AnyViewType>(ofType type: AnyViewType.Type, from entry: PSDKUIKit.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  @available(macOS, unavailable)
  public static func previousSibling<AnyViewControllerType>(containing type: AnyViewControllerType.Type, from entry: PSDKUIKit.PlatformViewController) -> AnyViewControllerType? where AnyViewControllerType : UIKit.UIViewController
  public static func previousSibling<AnyViewControllerType>(ofType type: AnyViewControllerType.Type, from entry: PSDKUIKit.PlatformViewController) -> AnyViewControllerType? where AnyViewControllerType : UIKit.UIViewController
  public static func nextSibling<AnyViewType>(containing type: AnyViewType.Type, from entry: PSDKUIKit.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func nextSibling<AnyViewType>(ofType type: AnyViewType.Type, from entry: PSDKUIKit.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func findAncestor<AnyViewType>(ofType type: AnyViewType.Type, from entry: PSDKUIKit.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func findAncestorOrAncestorChild<AnyViewType>(ofType type: AnyViewType.Type, from entry: PSDKUIKit.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func findHostingView(from entry: PSDKUIKit.PlatformView) -> PSDKUIKit.PlatformView?
  public static func findViewHost(from entry: PSDKUIKit.PlatformView) -> PSDKUIKit.PlatformView?
}
public enum TargetViewSelector {
  public static func siblingContaining<TargetView>(from entry: PSDKUIKit.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func siblingContainingOrAncestor<TargetView>(from entry: PSDKUIKit.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func siblingContainingOrAncestorOrAncestorChild<TargetView>(from entry: PSDKUIKit.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func siblingOfType<TargetView>(from entry: PSDKUIKit.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func siblingOfTypeOrAncestor<TargetView>(from entry: PSDKUIKit.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func ancestorOrSiblingContaining<TargetView>(from entry: PSDKUIKit.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func ancestorOrSiblingOfType<TargetView>(from entry: PSDKUIKit.PlatformView) -> TargetView? where TargetView : UIKit.UIView
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PSDKBarButton : UIKit.UIBarButtonItem {
  @_Concurrency.MainActor(unsafe) public init(image: UIKit.UIImage?, style: UIKit.UIBarButtonItem.Style, customAction: @escaping () -> Swift.Void = {})
  @objc deinit
}
extension Foundation.Bundle {
  public static func getPhones(first ic: Swift.String? = nil, complete: @escaping ([PSDKUIKit.PSDKCountryModel]) -> Swift.Void)
  public static func getPhones() -> [PSDKUIKit.PSDKCountryModel]
}
public struct ThemeColorReader : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: SwiftUI.Color {
    get
  }
  public typealias Body = SwiftUI.Color
}
public struct PSDKColorReader : PSDKUIKit.PSDKColorProvider, SwiftUI.View {
  public var name: Swift.String
  public var group: Swift.String
  public var opacity: Swift.Double
  public func color(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUI.Color
  public typealias Body = PSDKUIKit.ThemeColorReader
}
public enum ActionSheetSize {
  case standard
  case middle
  case full
  public var height: CoreFoundation.CGFloat {
    get
  }
  public static func == (a: PSDKUIKit.ActionSheetSize, b: PSDKUIKit.ActionSheetSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PSDKDraggableView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public enum DragDirection {
    case vertical, horizontal, downwards, upwards
    public static func == (a: PSDKUIKit.PSDKDraggableView<Content>.DragDirection, b: PSDKUIKit.PSDKDraggableView<Content>.DragDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(dragDirection: PSDKUIKit.PSDKDraggableView<Content>.DragDirection, minimumDrag: CoreFoundation.CGFloat, didDrag: @escaping () -> Swift.Void, @SwiftUI.ViewBuilder _ content: () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit17PSDKDraggableViewV4bodyQrvp", 0) __<Content>
}
public enum WechatCompressType {
  case session
  case timeline
  public static func == (a: PSDKUIKit.WechatCompressType, b: PSDKUIKit.WechatCompressType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIImage {
  public func resized(to size: CoreFoundation.CGSize) -> UIKit.UIImage
  public func wxCompress(type: PSDKUIKit.WechatCompressType = .timeline) -> Foundation.Data?
}
extension Swift.String {
  public func appendToURL(_ fileURL: Foundation.URL) throws
  public func isRTLText() -> Swift.Bool
  public func parseRichTextElements() -> [PSDKUIKit.PSDKStringBold.PSDKElement]
  public subscript(range: Swift.Range<Swift.Int>) -> Swift.String {
    get
  }
  public func with(_ text: Swift.String) -> Swift.String
  public func isValidWithRegex(_ regex: Swift.String) -> Swift.Bool
  public func removeCharacters(_ regexPattern: Swift.String) -> Swift.String
  public func trimmingWhiteSpaces() -> Swift.String
  public func fromBase64() -> Swift.String?
  public func toBase64() -> Swift.String
  public func hexStringToByteArray() -> Foundation.Data?
  public func hexStringToUIColor() -> UIKit.UIColor
  public func toColorComponets() -> [CoreFoundation.CGFloat]
  public func width(withHeight constrainedHeight: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGFloat
  public func height(withWidth constrainedWidth: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGFloat
}
public class PSDKModalRouter : Combine.ObservableObject {
  public init()
  public init(root: PSDKUIKit.PSDKModalRoute)
  public func pushRoute(_ route: PSDKUIKit.PSDKModalRoute)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct PSDKModalRoute : Swift.Equatable {
  public init(@SwiftUI.ViewBuilder view: () -> SwiftUI.AnyView)
  public static func == (lhs: PSDKUIKit.PSDKModalRoute, rhs: PSDKUIKit.PSDKModalRoute) -> Swift.Bool
}
@_Concurrency.MainActor(unsafe) public struct PSDKOtpTextField<OTPState> : PSDKUIKit.PSDKTextFieldBase where OTPState : PSDKUIKit.PSDKTFState {
  @SwiftUI.ObservedObject @_projectedValueProperty($store) @_Concurrency.MainActor(unsafe) public var store: PSDKUIKit.PSDKTextFieldStore<OTPState> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var $store: SwiftUI.ObservedObject<PSDKUIKit.PSDKTextFieldStore<OTPState>>.Wrapper {
    get
  }
  @SwiftUI.Environment @_Concurrency.MainActor(unsafe) public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @SwiftUI.Environment @_Concurrency.MainActor(unsafe) public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @_Concurrency.MainActor(unsafe) public var content: SwiftUI.AnyView?
  @_Concurrency.MainActor(unsafe) public var startView: SwiftUI.AnyView?
  @_Concurrency.MainActor(unsafe) public var endView: SwiftUI.AnyView?
  @_Concurrency.MainActor(unsafe) public var showHint: Swift.Bool
  @_Concurrency.MainActor(unsafe) public init(_ store: PSDKUIKit.PSDKTextFieldStore<OTPState>, _ hint: Swift.String = "", _ messages: PSDKUIKit.PSDKTextFieldMessages = .init(), handler: PSDKUIKit.PSDKTextValidationHandler? = nil, onChanged: ((Swift.String) -> Swift.Void)? = nil, onSubmit: ((PSDKUIKit.PSDKValidationResult) -> Swift.Void)? = nil)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit13PSDKFieldBasePAAE4bodyQrvp", 0) __<PSDKUIKit.PSDKOtpTextField<OTPState>>
  public typealias Field = SwiftUI.TextField<SwiftUI.Text>
  public typealias Store = PSDKUIKit.PSDKTextFieldStore<OTPState>
}
public enum PSDKDisplayLinkProgress {
  case decimal(precision: Swift.Int? = nil)
  case seconds(precision: Swift.Int? = nil)
}
@objc public class PSDKDisplayLinkBinding : ObjectiveC.NSObject, Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($progress) public var progress: Swift.Double {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $progress: Combine.Published<Swift.Double>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var onComplete: (() -> Swift.Void)?
  public var isPaused: Swift.Bool {
    get
  }
  public init(preferredFramesPerSecond: Swift.Int, displayProgress: PSDKUIKit.PSDKDisplayLinkProgress = .decimal())
  public func run(for duration: CoreFoundation.CFTimeInterval)
  @objc public func tick()
  public func invalidate()
  @objc deinit
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
extension SwiftUI.Image {
  public static var psdkEmail: SwiftUI.Image {
    get
  }
  public static var psdkWeb: SwiftUI.Image {
    get
  }
  public static var regulaIcon: SwiftUI.Image {
    get
  }
  public static var psdkNavigationClose: SwiftUI.Image {
    get
  }
  public static var psdkNavigationCloseLight: SwiftUI.Image {
    get
  }
  public static var psdkNavigationBackButton: SwiftUI.Image {
    get
  }
  public static var psdkNavigationBackButtonLight: SwiftUI.Image {
    get
  }
  public static var locationOnActive: SwiftUI.Image {
    get
  }
  public static var arrowDropUpBlack: SwiftUI.Image {
    get
  }
  public static var arrowDropUp: SwiftUI.Image {
    get
  }
  public static var arrowDropDownBlack: SwiftUI.Image {
    get
  }
  public static var arrowDropDown: SwiftUI.Image {
    get
  }
  public static var personActive: SwiftUI.Image {
    get
  }
  public static var calendarTodayActive: SwiftUI.Image {
    get
  }
  public static var iconSearch: SwiftUI.Image {
    get
  }
  public static var done: SwiftUI.Image {
    get
  }
  public static var psdkEditIcon: SwiftUI.Image {
    get
  }
  public static var psdkEllipsis: SwiftUI.Image {
    get
  }
  public static var psdkMoreVert: SwiftUI.Image {
    get
  }
  public static var psdkPencil: SwiftUI.Image {
    get
  }
  public static var psdkDelete: SwiftUI.Image {
    get
  }
  public static var psdkHelpIcon: SwiftUI.Image {
    get
  }
  public static var psdkDangerRedIcon: SwiftUI.Image {
    get
  }
  public static var psdkError: SwiftUI.Image {
    get
  }
  public static var psdkInfoError: SwiftUI.Image {
    get
  }
}
public struct PrivacyPolicyView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(agreements: Swift.String)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit17PrivacyPolicyViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct PSDKCloseTextField<Store> : SwiftUI.View where Store : PSDKUIKit.PSDKTextFieldStoreProtocol, Store.StateType : PSDKUIKit.PSDKSecureState {
  @SwiftUI.Environment @_Concurrency.MainActor(unsafe) public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @SwiftUI.Environment @_Concurrency.MainActor(unsafe) public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public init?(store: Store)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit18PSDKCloseTextFieldV4bodyQrvp", 0) __<Store>
}
extension PSDKUIKit.PSDKFieldBase {
  public func isEditable(isEditable: Swift.Bool) -> Self
  public func isRequired(_ flag: Swift.Bool = true) -> Self
  public func withStartView<Content>(_ view: @escaping () -> Content?) -> Self where Content : SwiftUI.View
  public func withEndView<Content>(_ view: @escaping () -> Content?) -> Self where Content : SwiftUI.View
  public func withOnSubmit(submit: ((PSDKUIKit.PSDKValidationResult) -> Swift.Void)?) -> some PSDKUIKit.PSDKFieldBase
  
  public func withHandler(handler: @escaping PSDKUIKit.PSDKTextValidationHandler) -> some PSDKUIKit.PSDKFieldBase
  
  public func withOnChanged(onChanged: ((Swift.String) -> Swift.Void)?) -> some PSDKUIKit.PSDKFieldBase
  
  public func withMessages(_ messages: PSDKUIKit.PSDKTextFieldMessages) -> Self
  public func withAttributes(_ attributes: PSDKUIKit.PSDKTextFieldAttributes) -> Self
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PSDKActionSheetHosting<Content> : SwiftUI.UIHostingController<PSDKUIKit.PSDKActionSheetContainer<Content>> where Content : PSDKUIKit.PSDKActionSheetBase {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var canDismiss: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var onDisappear: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public init(view: Content, identifier: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class InteractiveModalTransitioningDelegate : ObjectiveC.NSObject, UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
public protocol PSDKTFState {
}
public struct PSDKTFEmptyState : PSDKUIKit.PSDKTFState {
}
public protocol PSDKTextFieldStoreProtocol : Combine.ObservableObject, PSDKUIKit.PSDKTextFieldStoreProvider {
  associatedtype StateType : PSDKUIKit.PSDKTFState
  var state: Self.StateType { get set }
}
public protocol PSDKTextFieldStoreProvider : AnyObject {
  var attributes: PSDKUIKit.PSDKTextFieldAttributes { get set }
  var messages: PSDKUIKit.PSDKTextFieldMessages { get set }
  var validationResult: PSDKUIKit.PSDKValidationResult { get set }
  var isRequestFocus: Swift.Bool { get }
  var isFocused: Swift.Bool { get }
  var text: Swift.String { get }
  var nextStore: (any PSDKUIKit.PSDKTextFieldStoreProvider)? { get }
  var onChanged: ((Swift.String) -> Swift.Void)? { get set }
  var handler: PSDKUIKit.PSDKTextValidationHandler? { get set }
  var onSubmit: ((PSDKUIKit.PSDKValidationResult) -> Swift.Void)? { get set }
  @discardableResult
  func setText(_ newValue: Swift.String) -> Swift.Bool
  func requestFocus()
  func setFocused(_ isFocused: Swift.Bool)
  func validateFormat(showError: Swift.Bool)
  func onChangedDefault(text: Swift.String)
}
extension PSDKUIKit.PSDKTextFieldStoreProtocol {
  public func validateFormat(showError: Swift.Bool)
  public func onChangedDefault(text: Swift.String)
}
open class PSDKTextFieldStore<StateType> : ObjectiveC.NSObject, PSDKUIKit.PSDKTextFieldStoreProtocol where StateType : PSDKUIKit.PSDKTFState {
  @Combine.Published @_projectedValueProperty($state) public var state: StateType {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $state: Combine.Published<StateType>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($validationResult) public var validationResult: PSDKUIKit.PSDKValidationResult {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $validationResult: Combine.Published<PSDKUIKit.PSDKValidationResult>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isRequestFocus) public var isRequestFocus: Swift.Bool {
    get
  }
  public var $isRequestFocus: Combine.Published<Swift.Bool>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($isFocused) public var isFocused: Swift.Bool {
    get
  }
  public var $isFocused: Combine.Published<Swift.Bool>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($text) public var text: Swift.String {
    get
  }
  public var $text: Combine.Published<Swift.String>.Publisher {
    get
  }
  public var attributes: PSDKUIKit.PSDKTextFieldAttributes
  public var messages: PSDKUIKit.PSDKTextFieldMessages
  public var nextStore: (any PSDKUIKit.PSDKTextFieldStoreProvider)?
  public var handler: PSDKUIKit.PSDKTextValidationHandler?
  public var onChanged: ((Swift.String) -> Swift.Void)?
  public var onSubmit: ((PSDKUIKit.PSDKValidationResult) -> Swift.Void)?
  public init(state: StateType)
  public init(state: StateType, validationResult: PSDKUIKit.PSDKValidationResult = .none, isRequestFocus: Swift.Bool = false, isFocused: Swift.Bool = false, text: Swift.String = "", attributes: PSDKUIKit.PSDKTextFieldAttributes = .init(), messages: PSDKUIKit.PSDKTextFieldMessages = .init(), nextStore: (any PSDKUIKit.PSDKTextFieldStoreProvider)? = nil, handler: PSDKUIKit.PSDKTextValidationHandler? = nil, onChanged: ((Swift.String) -> Swift.Void)? = nil, onSubmit: ((PSDKUIKit.PSDKValidationResult) -> Swift.Void)? = nil, prevText: Swift.String = "")
  @discardableResult
  public func setText(_ newValue: Swift.String) -> Swift.Bool
  public func requestFocus()
  public func setFocused(_ isFocused: Swift.Bool = true)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class PSDKTextFieldEmptyStore : PSDKUIKit.PSDKTextFieldStore<PSDKUIKit.PSDKTFEmptyState> {
  public init(validationResult: PSDKUIKit.PSDKValidationResult = .none, isRequestFocus: Swift.Bool = false, isFocused: Swift.Bool = false, text: Swift.String = "", attributes: PSDKUIKit.PSDKTextFieldAttributes = .init(), messages: PSDKUIKit.PSDKTextFieldMessages = .init(), nextStore: (any PSDKUIKit.PSDKTextFieldStoreProvider)? = nil, handler: PSDKUIKit.PSDKTextValidationHandler? = nil, onChanged: ((Swift.String) -> Swift.Void)? = nil, onSubmit: ((PSDKUIKit.PSDKValidationResult) -> Swift.Void)? = nil, prevText: Swift.String = "")
  @objc deinit
}
public struct PSDKDocumentModel : PSDKUIKit.PSDKIdentifiable {
  public var id: Foundation.UUID
  public let code: Swift.String
  public let description: Swift.String
  public init(_ code: Swift.String, _ description: Swift.String)
  public static func == (a: PSDKUIKit.PSDKDocumentModel, b: PSDKUIKit.PSDKDocumentModel) -> Swift.Bool
  public typealias ID = Foundation.UUID
}
public enum PSDKWindowIdentifier : Swift.String {
  case main, alert
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension PSDKUIKit.PSDKInstructionView.Style : Swift.Equatable {}
extension PSDKUIKit.PSDKInstructionView.Style : Swift.Hashable {}
extension PSDKUIKit.PressedMode : Swift.Equatable {}
extension PSDKUIKit.PressedMode : Swift.Hashable {}
extension PSDKUIKit.PSDKFlowLayout.Mode : Swift.Equatable {}
extension PSDKUIKit.PSDKFlowLayout.Mode : Swift.Hashable {}
extension PSDKUIKit.PSDKStyle : Swift.Equatable {}
extension PSDKUIKit.PSDKStyle : Swift.Hashable {}
extension PSDKUIKit.PSDKActionSheetContainer.DragDirection : Swift.Equatable {}
extension PSDKUIKit.PSDKActionSheetContainer.DragDirection : Swift.Hashable {}
extension PSDKUIKit.PSDKCountryModel.CodingKeys : Swift.Equatable {}
extension PSDKUIKit.PSDKCountryModel.CodingKeys : Swift.Hashable {}
extension PSDKUIKit.PSDKCountryModel.CodingKeys : Swift.RawRepresentable {}
extension PSDKUIKit.PSDKButtonStyle.Size : Swift.Equatable {}
extension PSDKUIKit.PSDKButtonStyle.Size : Swift.Hashable {}
extension PSDKUIKit.PSDKButtonStyle.ButtonType : Swift.Equatable {}
extension PSDKUIKit.PSDKButtonStyle.ButtonType : Swift.Hashable {}
extension PSDKUIKit.PSDKLottieName : Swift.Equatable {}
extension PSDKUIKit.PSDKLottieName : Swift.Hashable {}
extension PSDKUIKit.PSDKLottieName : Swift.RawRepresentable {}
extension PSDKUIKit.Fonts : Swift.Equatable {}
extension PSDKUIKit.Fonts : Swift.Hashable {}
extension PSDKUIKit.Fonts : Swift.RawRepresentable {}
extension PSDKUIKit.PSDKTextFieldAttributes.Style : Swift.Equatable {}
extension PSDKUIKit.PSDKTextFieldAttributes.Style : Swift.Hashable {}
extension PSDKUIKit.PSDKImage : Swift.Equatable {}
extension PSDKUIKit.PSDKImage : Swift.Hashable {}
extension PSDKUIKit.PSDKImage : Swift.RawRepresentable {}
extension PSDKUIKit.PSDKEmpasisColor : Swift.Equatable {}
extension PSDKUIKit.PSDKEmpasisColor : Swift.Hashable {}
extension PSDKUIKit.PSDKEmpasisColor : Swift.RawRepresentable {}
extension PSDKUIKit.PSDKTertiaryColor : Swift.Equatable {}
extension PSDKUIKit.PSDKTertiaryColor : Swift.Hashable {}
extension PSDKUIKit.PSDKTertiaryColor : Swift.RawRepresentable {}
extension PSDKUIKit.PSDKColor : Swift.Equatable {}
extension PSDKUIKit.PSDKColor : Swift.Hashable {}
extension PSDKUIKit.PSDKColor.Brand : Swift.Equatable {}
extension PSDKUIKit.PSDKColor.Brand : Swift.Hashable {}
extension PSDKUIKit.PSDKColor.Brand : Swift.RawRepresentable {}
extension PSDKUIKit.PSDKColor.Surface : Swift.Equatable {}
extension PSDKUIKit.PSDKColor.Surface : Swift.Hashable {}
extension PSDKUIKit.PSDKColor.Surface : Swift.RawRepresentable {}
extension PSDKUIKit.ActionSheetSize : Swift.Equatable {}
extension PSDKUIKit.ActionSheetSize : Swift.Hashable {}
extension PSDKUIKit.PSDKDraggableView.DragDirection : Swift.Equatable {}
extension PSDKUIKit.PSDKDraggableView.DragDirection : Swift.Hashable {}
extension PSDKUIKit.WechatCompressType : Swift.Equatable {}
extension PSDKUIKit.WechatCompressType : Swift.Hashable {}
extension PSDKUIKit.PSDKWindowIdentifier : Swift.Equatable {}
extension PSDKUIKit.PSDKWindowIdentifier : Swift.Hashable {}
extension PSDKUIKit.PSDKWindowIdentifier : Swift.RawRepresentable {}
