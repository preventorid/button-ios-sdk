// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name PSDKUIKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import Combine
import Foundation
import Lottie
@_exported import PSDKUIKit
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_hasMissingDesignatedInitializers @available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
@_Concurrency.MainActor @preconcurrency public class PSDKIntrospectionUIViewController : UIKit.UIViewController {
  @objc deinit
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
@_Concurrency.MainActor @preconcurrency public struct PSDKUIKitIntrospectionViewController<TargetViewControllerType> : SwiftUI.UIViewControllerRepresentable where TargetViewControllerType : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public init(selector: @escaping (UIKit.UIViewController) -> TargetViewControllerType?, customize: @escaping (TargetViewControllerType) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func makeUIViewController(context: SwiftUI.UIViewControllerRepresentableContext<PSDKUIKit.PSDKUIKitIntrospectionViewController<TargetViewControllerType>>) -> PSDKUIKit.PSDKIntrospectionUIViewController
  @_Concurrency.MainActor @preconcurrency public func updateUIViewController(_ uiViewController: PSDKUIKit.PSDKIntrospectionUIViewController, context: SwiftUI.UIViewControllerRepresentableContext<PSDKUIKit.PSDKUIKitIntrospectionViewController<TargetViewControllerType>>)
  @available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
  public typealias Coordinator = Swift.Void
  @available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
  public typealias UIViewControllerType = PSDKUIKit.PSDKIntrospectionUIViewController
}
@_Concurrency.MainActor @preconcurrency public struct PSDKInstructionView : SwiftUICore.View {
  public enum Style {
    case light
    case dark
    public static func == (a: PSDKUIKit.PSDKInstructionView.Style, b: PSDKUIKit.PSDKInstructionView.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(description: Swift.String)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit19PSDKInstructionViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct PSDKInstructionModalView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init<Content>(showModal: SwiftUICore.Binding<Swift.Bool>, description: Swift.String, modalRouter: PSDKUIKit.PSDKModalRouter, content: () -> Content) where Content : SwiftUICore.View
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit24PSDKInstructionModalViewV4bodyQrvp", 0) __
}
public protocol PSDKIdentifiable : Swift.Equatable, Swift.Identifiable {
  var findItem: Swift.Bool { get }
  var description: Swift.String { get }
}
public protocol PSDKChooseState : PSDKUIKit.PSDKTFState {
  associatedtype Item : PSDKUIKit.PSDKIdentifiable
  var item: Self.Item? { get set }
  init(item: Self.Item?)
}
extension PSDKUIKit.PSDKIdentifiable {
  public var findItem: Swift.Bool {
    get
  }
}
public struct PSDKChooseItemState<Item> : PSDKUIKit.PSDKChooseState where Item : PSDKUIKit.PSDKIdentifiable {
  public var item: Item?
  public init(item: Item? = nil)
}
public protocol PSDKCountryState : PSDKUIKit.PSDKChooseState where Self.Item == PSDKUIKit.PSDKCountryModel {
}
public struct PSDKCountryItemState : PSDKUIKit.PSDKCountryState {
  public var item: PSDKUIKit.PSDKCountryModel?
  public init(item: PSDKUIKit.PSDKCountryModel? = nil)
  public typealias Item = PSDKUIKit.PSDKCountryModel
}
open class PSDKChooseReducer<State> where State : PSDKUIKit.PSDKChooseState {
  public init()
  open func newState(item: State.Item?, state: State) -> State
  @objc deinit
}
public protocol ChooseStore : PSDKUIKit.PSDKTextFieldStoreProtocol where Self.StateType : PSDKUIKit.PSDKChooseState {
  typealias Item = Self.StateType.Item
  var data: [Self.Item] { get }
  var autoDescriptable: Swift.Bool { get }
  var showDropdown: Swift.Bool { get set }
  func dispatch(item: Self.Item?, completion: (() -> Swift.Void)?)
}
open class PSDKChooseStore<State> : PSDKUIKit.PSDKTextFieldStore<State>, PSDKUIKit.ChooseStore where State : PSDKUIKit.PSDKChooseState {
  @Combine.Published @_projectedValueProperty($showDropdown) public var showDropdown: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $showDropdown: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var data: [PSDKUIKit.PSDKChooseStore<State>.Item] {
    get
    set
  }
  final public let reducer: PSDKUIKit.PSDKChooseReducer<State>
  public var autoDescriptable: Swift.Bool
  public init(state: State, data: [PSDKUIKit.PSDKChooseStore<State>.Item], reducer: PSDKUIKit.PSDKChooseReducer<State> = .init())
  public init(data: [PSDKUIKit.PSDKChooseStore<State>.Item], reducer: PSDKUIKit.PSDKChooseReducer<State> = .init()) where State == PSDKUIKit.PSDKCountryItemState
  open func dispatch(item: PSDKUIKit.PSDKChooseStore<State>.Item?, completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
public enum PressedMode {
  case pressStartIcon
  case pressEndIcon
  case pressAny
  public static func == (a: PSDKUIKit.PressedMode, b: PSDKUIKit.PressedMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct PSDKDropdown<Item> : SwiftUICore.View where Item : PSDKUIKit.PSDKIdentifiable {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String? = nil, options: [Item], hint: Swift.String = "", showSharedField: Swift.Bool = false, onTaped: @escaping (Item) -> Swift.Void, createDropdownElement: @escaping (Item) -> PSDKUIKit.PSDKDropdownOptionElement<Item>)
  @_Concurrency.MainActor @preconcurrency public func filterData(item: Item, text: Swift.String) -> Swift.Bool
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit12PSDKDropdownV4bodyQrvp", 0) __<Item>
}
@_Concurrency.MainActor @preconcurrency public struct PSDKDropdownOptionElement<Item> : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(item: Item, content: @escaping (Swift.Bool) -> SwiftUICore.AnyView)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit25PSDKDropdownOptionElementV4bodyQrvp", 0) __<Item>
}
@_Concurrency.MainActor @preconcurrency public struct PSDKButton<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(style: PSDKUIKit.PSDKButtonStyle = PSDKButtonStyle(), disabled: Swift.Bool = false, action: @escaping () -> Swift.Void, fullWidth: Swift.Bool = false, accessibilityIdentifier: Swift.String? = nil, @SwiftUICore.ViewBuilder label: () -> Label, padding: CoreFoundation.CGFloat? = nil)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit10PSDKButtonV4bodyQrvp", 0) __<Label>
}
extension PSDKUIKit.PSDKButton where Label == SwiftUICore.Text {
  @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, style: PSDKUIKit.PSDKButtonStyle = PSDKButtonStyle(), disabled: Swift.Bool = false, fullWidth: Swift.Bool = false, accessibilityIdentifier: Swift.String? = nil, action: @escaping () -> Swift.Void, padding: CoreFoundation.CGFloat? = nil) where S : Swift.StringProtocol
}
@_Concurrency.MainActor @preconcurrency public struct PSDKProgressBar : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(progressPercentage: Swift.Double, barHeight: CoreFoundation.CGFloat = 10, progressColor: PSDKUIKit.PSDKColor = .brandAccent, verticalPadding: CoreFoundation.CGFloat = 10, isRounded: Swift.Bool = true)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit15PSDKProgressBarV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct PSDKFlowLayout<RefreshBinding, Data, ItemView> : SwiftUICore.View where ItemView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(mode: PSDKUIKit.PSDKFlowLayout<RefreshBinding, Data, ItemView>.Mode, binding: SwiftUICore.Binding<RefreshBinding>, items: [Data], itemSpacing: CoreFoundation.CGFloat = 4, @SwiftUICore.ViewBuilder viewMapping: @escaping (Data) -> ItemView)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public enum Mode {
    case scrollable, vstack
    public static func == (a: PSDKUIKit.PSDKFlowLayout<RefreshBinding, Data, ItemView>.Mode, b: PSDKUIKit.PSDKFlowLayout<RefreshBinding, Data, ItemView>.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit14PSDKFlowLayoutV4bodyQrvp", 0) __<RefreshBinding, Data, ItemView>
}
extension PSDKUIKit.PSDKFlowLayout where RefreshBinding == Swift.Never? {
  @_Concurrency.MainActor @preconcurrency public init(mode: PSDKUIKit.PSDKFlowLayout<RefreshBinding, Data, ItemView>.Mode, items: [Data], itemSpacing: CoreFoundation.CGFloat = 4, @SwiftUICore.ViewBuilder viewMapping: @escaping (Data) -> ItemView)
}
@_Concurrency.MainActor @preconcurrency public struct PSDKAttributedText : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ content: Swift.String, foregroundColor: PSDKUIKit.PSDKColor = .onSurfaceGray400, font: SwiftUICore.Font = .psdkF16, textAligment: SwiftUICore.TextAlignment = .leading)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit18PSDKAttributedTextV4bodyQrvp", 0) __
}
public class PSDKSheetRouter : Combine.ObservableObject {
  public init()
  public init(root: any PSDKUIKit.PSDKActionSheetBase)
  public func pushRoute(_ route: any PSDKUIKit.PSDKActionSheetBase)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public enum PSDKStyle {
  case dark, light, custom, `default`
  public var normalize: PSDKUIKit.PSDKStyle {
    get
  }
  public static func == (a: PSDKUIKit.PSDKStyle, b: PSDKUIKit.PSDKStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PSDKUIColorManager {
  public static let defaultColor: PSDKUIKit.PSDKUIColorManager
  public init?(from data: [Foundation.Data])
  public func updateStyle(style: PSDKUIKit.PSDKStyle)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct PSDKSuccessIcon : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init()
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit15PSDKSuccessIconV4bodyQrvp", 0) __
}
extension CoreVideo.CVBuffer {
  public var uiImage: UIKit.UIImage? {
    get
  }
}
public struct PSDKTextFieldMessages {
  public let emptyErrorMessage: Swift.String?
  public let minLengthErrorMessage: Swift.String?
  public let maxLengthErrorMessage: Swift.String?
  public let invalidImputMessage: Swift.String?
  public init(emptyErrorMessage: Swift.String? = nil, minLengthErrorMessage: Swift.String? = nil, maxLengthErrorMessage: Swift.String? = nil, invalidImputMessage: Swift.String? = nil)
}
public protocol PSDKThemeProvider {
  var style: PSDKUIKit.PSDKUIColorManager { get }
}
public enum PSDKTheme : PSDKUIKit.PSDKThemeProvider {
  case `default`
  case custom(PSDKUIKit.PSDKUIColorManager)
  public var style: PSDKUIKit.PSDKUIColorManager {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct OptionalScrollViewModifier : SwiftUICore.ViewModifier {
  public enum Option {
    case sizeClass
    case custom(Swift.Bool)
  }
  @_Concurrency.MainActor @preconcurrency public func body(content: PSDKUIKit.OptionalScrollViewModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit26OptionalScrollViewModifierV4body7contentQr7SwiftUI01_dE8_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func withAdaptiveScrollView(option: PSDKUIKit.OptionalScrollViewModifier.Option = .sizeClass) -> some SwiftUICore.View
  
}
extension PSDKUIKit.PSDKFieldBase {
  public var backgroundColor: any PSDKUIKit.PSDKColorProvider {
    get
  }
  public var textColor: SwiftUICore.Color {
    get
  }
  public var defaultTextColor: any PSDKUIKit.PSDKColorProvider {
    get
  }
  public var hintColor: any PSDKUIKit.PSDKColorProvider {
    get
  }
  public var defaultHintColor: any PSDKUIKit.PSDKColorProvider {
    get
  }
  public var lineColor: any PSDKUIKit.PSDKColorProvider {
    get
  }
  public var defaultLineColor: any PSDKUIKit.PSDKColorProvider {
    get
  }
  public var floatHintColor: any PSDKUIKit.PSDKColorProvider {
    get
  }
}
extension SwiftUICore.View {
  @available(iOSApplicationExtension, unavailable)
  @_Concurrency.MainActor @preconcurrency public func withKeyboardEnabled(bottom: CoreFoundation.CGFloat = 16) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func border(width: CoreFoundation.CGFloat, edges: [SwiftUICore.Edge], color: SwiftUICore.Color) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func placeholder<Content>(when: Swift.Bool, alignment: SwiftUICore.Alignment = .leading, @SwiftUICore.ViewBuilder _ placeholder: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func menu<Content>(_ showMenu: Swift.Bool, content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func toAnyView() -> SwiftUICore.AnyView
  @_Concurrency.MainActor @preconcurrency public func demiModal(_ modal: PSDKUIKit.PSDKDemiModal?) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func demiModal(presented: SwiftUICore.Binding<Swift.Bool>, router: PSDKUIKit.PSDKModalRouter, opacity: Swift.Double = 0.8) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func demiModal<Modal>(presented: SwiftUICore.Binding<Swift.Bool>, title: Swift.String, opacity: Swift.Double = 0.8, @SwiftUICore.ViewBuilder _ body: () -> Modal) -> some SwiftUICore.View where Modal : SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func cornerRadius(_ radius: CoreFoundation.CGFloat, corners: UIKit.UIRectCorner) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func dismissKeyboard()
  @_Concurrency.MainActor @preconcurrency public func onAnimationCompleted<Value>(for value: Value, completion: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, PSDKUIKit.PSDKAnimationCompletionObserverModifier<Value>> where Value : SwiftUICore.VectorArithmetic
  @_Concurrency.MainActor @preconcurrency public func backgroundColor(_ psdkColor: any PSDKUIKit.PSDKColorProvider) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func shake(with shakes: Swift.Bool) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func psdkKerning(_ kerning: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct PSDKOffsetKeyboard : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(bottom: CoreFoundation.CGFloat = 16)
  @_Concurrency.MainActor @preconcurrency public func body(content: PSDKUIKit.PSDKOffsetKeyboard.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit18PSDKOffsetKeyboardV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
extension SwiftUICore.Color {
  public init(hex: Swift.String)
  public static var psdkShadowBoxButtonColor: SwiftUICore.Color {
    get
  }
}
@available(iOS 14.0, *)
extension SwiftUICore.Color {
  public func toHexString() -> Swift.String
}
extension UIKit.UIColor {
  public static var psdkShadowBoxButtonColor: UIKit.UIColor {
    get
  }
  public func toHexString() -> Swift.String
  public func rgb() -> Swift.Int?
  public var color: SwiftUICore.Color {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct PSDKStringBold : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ content: Swift.String, colorHighlighted: PSDKUIKit.PSDKColor, isBold: Swift.Bool = true, colorUnHighlighted: PSDKUIKit.PSDKColor = .onSurfaceGray400, font: SwiftUICore.Font = .psdkF16)
  public struct PSDKElement : Swift.Identifiable {
    public let id: Foundation.UUID
    public init(content: Swift.String, isBold: Swift.Bool)
    public typealias ID = Foundation.UUID
  }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit14PSDKStringBoldV4bodyQrvp", 0) __
}
extension Foundation.Date {
  public func getStringDate(dateFormat: Swift.String, locale: Foundation.Locale = .current) -> Swift.String
}
@_Concurrency.MainActor @preconcurrency public struct PSDKDemiModal : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(presented: SwiftUICore.Binding<Swift.Bool>, router: PSDKUIKit.PSDKModalRouter, opacity: Swift.Double = 0.8)
  @_Concurrency.MainActor @preconcurrency public init<State>(store: PSDKUIKit.PSDKChooseStore<State>, router: PSDKUIKit.PSDKModalRouter, opacity: Swift.Double = 0.8) where State : PSDKUIKit.PSDKChooseState
  @_Concurrency.MainActor @preconcurrency public init<Modal>(presented: SwiftUICore.Binding<Swift.Bool>, title: Swift.String, opacity: Swift.Double = 0.8, @SwiftUICore.ViewBuilder _ body: () -> Modal) where Modal : SwiftUICore.View
  @_Concurrency.MainActor @preconcurrency public func body(content: PSDKUIKit.PSDKDemiModal.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit13PSDKDemiModalV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct PSDKTextFieldGeneral<State> : PSDKUIKit.PSDKTextFieldBase where State : PSDKUIKit.PSDKTFState {
  @_Concurrency.MainActor @preconcurrency public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @SwiftUICore.ObservedObject @_projectedValueProperty($store) @_Concurrency.MainActor @preconcurrency public var store: PSDKUIKit.PSDKTextFieldStore<State> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $store: SwiftUICore.ObservedObject<PSDKUIKit.PSDKTextFieldStore<State>>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var startView: SwiftUICore.AnyView?
  @_Concurrency.MainActor @preconcurrency public var endView: SwiftUICore.AnyView?
  @_Concurrency.MainActor @preconcurrency public init(_ store: PSDKUIKit.PSDKTextFieldStore<State>, _ attributes: PSDKUIKit.PSDKTextFieldAttributes, _ messages: PSDKUIKit.PSDKTextFieldMessages = .init(), handler: PSDKUIKit.PSDKTextValidationHandler? = nil, onChanged: ((Swift.String) -> Swift.Void)? = nil, onSubmit: ((PSDKUIKit.PSDKValidationResult) -> Swift.Void)? = nil)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit13PSDKFieldBasePAAE4bodyQrvp", 0) __<PSDKUIKit.PSDKTextFieldGeneral<State>>
  public typealias Field = SwiftUI.TextField<SwiftUICore.Text>
  public typealias Store = PSDKUIKit.PSDKTextFieldStore<State>
}
public enum TFConstants {
  public static let emailFormatRegex: Swift.String
  public static let phoneFormatRegex: Swift.String
  public static let phoneMinCount: Swift.Int
  public static let phoneMaxCount: Swift.Int
}
public protocol PSDKTextFieldBase : PSDKUIKit.PSDKFieldBase where Self.Field == SwiftUI.TextField<SwiftUICore.Text> {
}
extension PSDKUIKit.PSDKTextFieldBase {
  public var field: SwiftUI.TextField<SwiftUICore.Text> {
    get
  }
}
public protocol PSDKSecureState : PSDKUIKit.PSDKTFState {
  var hidePassword: Swift.Bool { get set }
}
@_Concurrency.MainActor @preconcurrency public struct PSDKSecureFieldBase<StateType> : PSDKUIKit.PSDKFieldBase where StateType : PSDKUIKit.PSDKSecureState {
  @SwiftUICore.ObservedObject @_projectedValueProperty($store) @_Concurrency.MainActor @preconcurrency public var store: PSDKUIKit.PSDKTextFieldStore<StateType> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $store: SwiftUICore.ObservedObject<PSDKUIKit.PSDKTextFieldStore<StateType>>.Wrapper {
    get
  }
  @SwiftUICore.Environment @_Concurrency.MainActor @preconcurrency public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @SwiftUICore.Environment @_Concurrency.MainActor @preconcurrency public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var startView: SwiftUICore.AnyView?
  @_Concurrency.MainActor @preconcurrency public var endView: SwiftUICore.AnyView?
  @_Concurrency.MainActor @preconcurrency public var field: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(store: PSDKUIKit.PSDKTextFieldStore<StateType>)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit13PSDKFieldBasePAAE4bodyQrvp", 0) __<PSDKUIKit.PSDKSecureFieldBase<StateType>>
  public typealias Field = @_opaqueReturnTypeOf("$s9PSDKUIKit19PSDKSecureFieldBaseV5fieldQrvp", 0) __<StateType>
  public typealias Store = PSDKUIKit.PSDKTextFieldStore<StateType>
}
@_Concurrency.MainActor @preconcurrency public struct PSDKSecureField<StateType> : SwiftUICore.View where StateType : PSDKUIKit.PSDKSecureState {
  @SwiftUICore.ObservedObject @_projectedValueProperty($store) @_Concurrency.MainActor @preconcurrency public var store: PSDKUIKit.PSDKTextFieldStore<StateType> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $store: SwiftUICore.ObservedObject<PSDKUIKit.PSDKTextFieldStore<StateType>>.Wrapper {
    get
  }
  @SwiftUICore.Environment @_Concurrency.MainActor @preconcurrency public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @SwiftUICore.Environment @_Concurrency.MainActor @preconcurrency public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(store: PSDKUIKit.PSDKTextFieldStore<StateType>)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit15PSDKSecureFieldV4bodyQrvp", 0) __<StateType>
}
public protocol ErrorViewProvider : SwiftUICore.View {
  func withMessages(_ messages: PSDKUIKit.PSDKTextFieldMessages) -> Self
  func withAttributes(_ attributes: PSDKUIKit.PSDKTextFieldAttributes) -> Self
}
public protocol PSDKFieldBase : PSDKUIKit.ErrorViewProvider {
  associatedtype Field : SwiftUICore.View
  associatedtype Store : PSDKUIKit.PSDKTextFieldStoreProtocol
  var store: Self.Store { get }
  var field: Self.Field { get }
  var contentBody: SwiftUICore.AnyView { get }
  var theme: any PSDKUIKit.PSDKThemeProvider { get }
  var style: PSDKUIKit.PSDKStyle { get }
  var showHint: Swift.Bool { get }
  var placeHolderView: SwiftUICore.AnyView { get }
  var startView: SwiftUICore.AnyView? { get set }
  var endView: SwiftUICore.AnyView? { get set }
  var startViewModifier: SwiftUICore.AnyView? { get }
  var endViewModifier: SwiftUICore.AnyView? { get }
  func getEndView() -> SwiftUICore.AnyView?
  func getStartView() -> SwiftUICore.AnyView?
}
extension PSDKUIKit.PSDKFieldBase {
  public var attributes: PSDKUIKit.PSDKTextFieldAttributes {
    get
    set
  }
  public var messages: PSDKUIKit.PSDKTextFieldMessages {
    get
    set
  }
  public var onSubmit: ((PSDKUIKit.PSDKValidationResult) -> Swift.Void)? {
    get
    set
  }
  public var handler: PSDKUIKit.PSDKTextValidationHandler? {
    get
    set
  }
  public var onChanged: ((Swift.String) -> Swift.Void)? {
    get
    set
  }
  public var showHint: Swift.Bool {
    get
  }
  public var errorMessage: Swift.String? {
    get
  }
  public var lineWidth: CoreFoundation.CGFloat {
    get
  }
  public var startViewModifier: SwiftUICore.AnyView? {
    get
  }
  public var endViewModifier: SwiftUICore.AnyView? {
    get
  }
  public var errorMessageView: SwiftUICore.AnyView? {
    get
  }
  public var placeHolderView: SwiftUICore.AnyView {
    get
  }
  public var textField: some SwiftUICore.View {
    get
  }
  public var contentBody: SwiftUICore.AnyView {
    get
  }
  public var body: some SwiftUICore.View {
    get
  }
  public func submit(_ showError: Swift.Bool = true)
  public func getEndView() -> SwiftUICore.AnyView?
  public func getStartView() -> SwiftUICore.AnyView?
}
public protocol PSDKGlobalTextField : PSDKUIKit.PSDKTextFieldBase {
}
extension PSDKUIKit.PSDKGlobalTextField {
  public func getEndView() -> SwiftUICore.AnyView?
}
extension CoreImage.CIImage {
  public var cgImage: CoreGraphics.CGImage? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@_Concurrency.MainActor @preconcurrency public class PSDKIntrospectionUIView : UIKit.UIView {
  @objc deinit
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
@_Concurrency.MainActor @preconcurrency public struct PSDKUIKitIntrospectionView<TargetViewType> : SwiftUI.UIViewRepresentable where TargetViewType : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public init(selector: @escaping (PSDKUIKit.PSDKIntrospectionUIView) -> TargetViewType?, customize: @escaping (TargetViewType) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: SwiftUI.UIViewRepresentableContext<PSDKUIKit.PSDKUIKitIntrospectionView<TargetViewType>>) -> PSDKUIKit.PSDKIntrospectionUIView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: PSDKUIKit.PSDKIntrospectionUIView, context: SwiftUI.UIViewRepresentableContext<PSDKUIKit.PSDKUIKitIntrospectionView<TargetViewType>>)
  @available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
  public typealias Coordinator = Swift.Void
  @available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
  public typealias UIViewType = PSDKUIKit.PSDKIntrospectionUIView
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func loadNib() -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public class func fromNib<T>() -> T where T : UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func rotate(duration: Swift.Double = 2.0)
  @_Concurrency.MainActor @preconcurrency public func stopRotating()
  @_Concurrency.MainActor @preconcurrency public var parentViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func displayTooltip(show: Swift.Bool = true, _ message: Swift.String, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func displayLeadingTooltip(show: Swift.Bool = true, _ message: Swift.String, completion: (() -> Swift.Void)? = nil)
}
extension SwiftUICore.Image {
  public static var psdkWorldCountries: SwiftUICore.Image {
    get
  }
  public static var psdkFailedAttempts: SwiftUICore.Image {
    get
  }
  public static var psdkReadyScan: SwiftUICore.Image {
    get
  }
  public static var psdkFlashOn: SwiftUICore.Image {
    get
  }
  public static var psdkFlashOff: SwiftUICore.Image {
    get
  }
  public static var psdkScanBack: SwiftUICore.Image {
    get
  }
  public static var psdkScanFront: SwiftUICore.Image {
    get
  }
  public static var psdkReadyScanSelfie: SwiftUICore.Image {
    get
  }
  public static var psdkRibbons: SwiftUICore.Image {
    get
  }
  public static var psdkReadyScanRfid: SwiftUICore.Image {
    get
  }
}
public struct PSDKTextFieldStyle {
}
extension Foundation.NSAttributedString {
  public var stringsWithAttributes: [PSDKUIKit.PSDKStringWithAttributes] {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct PSDKLabelButton : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(text: Swift.String, textHighLigth: Swift.String, action: @escaping () -> Swift.Void)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit15PSDKLabelButtonV4bodyQrvp", 0) __
}
public protocol ActionSheetState {
  var size: PSDKUIKit.ActionSheetSize { get set }
  var contentHeight: CoreFoundation.CGFloat? { get set }
}
public protocol ActionSheetDispatcher : Combine.ObservableObject {
  associatedtype StateType : PSDKUIKit.ActionSheetState
  var state: Self.StateType { get }
  var customDismiss: (() -> Swift.Void)? { get }
  func setSize(newSize: PSDKUIKit.ActionSheetSize)
  func setContentHeight(newHeight: CoreFoundation.CGFloat?)
}
public struct BasicActionSheetState : PSDKUIKit.ActionSheetState {
  public var contentHeight: CoreFoundation.CGFloat?
  public var size: PSDKUIKit.ActionSheetSize
  public init(size: PSDKUIKit.ActionSheetSize, contentHeight: CoreFoundation.CGFloat? = nil)
}
public class PSDKActionSheetStore<StateType> : PSDKUIKit.ActionSheetDispatcher where StateType : PSDKUIKit.ActionSheetState {
  @Combine.Published @_projectedValueProperty($state) public var state: StateType {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $state: Combine.Published<StateType>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  open var customDismiss: (() -> Swift.Void)?
  public init(state: StateType = BasicActionSheetState(size: .middle))
  public func setSize(newSize: PSDKUIKit.ActionSheetSize)
  public func setContentHeight(newHeight: CoreFoundation.CGFloat?)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_inheritsConvenienceInitializers public class ActionSheetStore : PSDKUIKit.PSDKActionSheetStore<PSDKUIKit.BasicActionSheetState> {
  override public init(state: PSDKUIKit.BasicActionSheetState = super)
  @objc deinit
}
public protocol PSDKActionSheetBase : SwiftUICore.View {
  associatedtype SheetStore : PSDKUIKit.ActionSheetDispatcher
  var theme: any PSDKUIKit.PSDKThemeProvider { get }
  var style: PSDKUIKit.PSDKStyle { get }
  var sheetStore: Self.SheetStore { get set }
  var isLoading: Swift.Bool { get }
  var leftButtonText: Swift.String? { get }
  var rightButtonText: Swift.String? { get }
  var leftButtonStyle: PSDKUIKit.PSDKButtonStyle { get }
  var rightButtonStyle: PSDKUIKit.PSDKButtonStyle { get }
  var leftButtonDissabled: Swift.Bool { get }
  var rightButtonDissabled: Swift.Bool { get }
  var title: Swift.String? { get }
  var subtitle: Swift.String? { get }
  var description: Swift.String? { get }
  var background: SwiftUICore.AnyView { get }
  var titleView: SwiftUICore.AnyView? { get }
  var subtitleView: PSDKUIKit.PSDKText? { get }
  var titleHeaderView: SwiftUICore.AnyView? { get }
  var descriptionView: SwiftUICore.AnyView? { get }
  var contentBody: SwiftUICore.AnyView? { get }
  var shouldDismiss: Swift.Bool { get }
  var canDrag: Swift.Bool { get }
  var buttonsView: SwiftUICore.AnyView? { get }
  var leftButton: SwiftUICore.AnyView? { get }
  var rightButton: SwiftUICore.AnyView? { get }
  var loadingView: SwiftUICore.AnyView? { get }
  func leftButtonAction()
  func rightButtonAction()
}
extension PSDKUIKit.PSDKActionSheetBase {
  public var shouldDismiss: Swift.Bool {
    get
  }
  public var canDrag: Swift.Bool {
    get
  }
  public var isLoading: Swift.Bool {
    get
  }
  public var leftButtonText: Swift.String? {
    get
  }
  public var rightButtonText: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var subtitle: Swift.String? {
    get
  }
  public var description: Swift.String? {
    get
  }
  public var showInstructionsView: Swift.Bool {
    get
  }
  public var showLeftButton: Swift.Bool {
    get
  }
  public var showRightButton: Swift.Bool {
    get
  }
  public var leftButtonStyle: PSDKUIKit.PSDKButtonStyle {
    get
  }
  public var rightButtonStyle: PSDKUIKit.PSDKButtonStyle {
    get
  }
  public var defaultTitle: PSDKUIKit.PSDKText? {
    get
  }
  public var titleView: SwiftUICore.AnyView? {
    get
  }
  public var defaultSubtitleView: PSDKUIKit.PSDKText? {
    get
  }
  public var subtitleView: PSDKUIKit.PSDKText? {
    get
  }
  public var descriptionView: SwiftUICore.AnyView? {
    get
  }
  public var bodyDefault: SwiftUICore.AnyView? {
    get
  }
  public var contentBody: SwiftUICore.AnyView? {
    get
  }
  public var leftButtonDissabled: Swift.Bool {
    get
  }
  public var rightButtonDissabled: Swift.Bool {
    get
  }
  public var background: SwiftUICore.AnyView {
    get
  }
  public var topSpacing: CoreFoundation.CGFloat {
    get
  }
  public var loadingView: SwiftUICore.AnyView? {
    get
  }
  public var defaultTitleHeader: some SwiftUICore.View {
    get
  }
  public var titleHeaderView: SwiftUICore.AnyView? {
    get
  }
  public var showButtons: Swift.Bool {
    get
  }
  public var buttonsView: SwiftUICore.AnyView? {
    get
  }
  public var leftButton: SwiftUICore.AnyView? {
    get
  }
  public var rightButton: SwiftUICore.AnyView? {
    get
  }
  public var body: some SwiftUICore.View {
    get
  }
  public func leftButtonAction()
  public func rightButtonAction()
}
@_Concurrency.MainActor @preconcurrency public struct PSDKActionSheetContainer<Content> : SwiftUICore.View where Content : PSDKUIKit.PSDKActionSheetBase {
  public enum DragDirection {
    case bottom, top
    public static func == (a: PSDKUIKit.PSDKActionSheetContainer<Content>.DragDirection, b: PSDKUIKit.PSDKActionSheetContainer<Content>.DragDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(_ content: Content)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit24PSDKActionSheetContainerV4bodyQrvp", 0) __<Content>
}
extension Foundation.FileManager {
  public static func documentDirectory() -> Foundation.URL
  public static func getFileUrlDD(fileName: Swift.String) -> Foundation.URL
}
public struct PSDKStringWithAttributes : Swift.Hashable, Swift.Identifiable {
  public let id: Foundation.UUID
  public static func == (lhs: PSDKUIKit.PSDKStringWithAttributes, rhs: PSDKUIKit.PSDKStringWithAttributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public init(string: Swift.String, attrs: [Foundation.NSAttributedString.Key : Any])
  public typealias ID = Foundation.UUID
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct PSDKHyperlinkText : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(strings: [PSDKUIKit.PSDKStringWithAttributes], font: SwiftUICore.Font = .psdkF14)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit17PSDKHyperlinkTextV4bodyQrvp", 0) __
}
public struct PSDKCountryModel : Swift.Decodable, PSDKUIKit.PSDKIdentifiable {
  public var id: Foundation.UUID
  public let flag: Swift.String
  public let ic: Swift.String
  public let country: Swift.String
  public let code: Swift.String
  public var findItem: Swift.Bool
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case flag, country, code, ic
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public var description: Swift.String {
    get
  }
  public init(ic: Swift.String)
  public init(flag: Swift.String, ic: Swift.String, country: Swift.String, code: Swift.String)
  public static func == (lhs: PSDKUIKit.PSDKCountryModel, rhs: PSDKUIKit.PSDKCountryModel) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor @preconcurrency public struct PSDKTextFieldCalendar<S> : SwiftUICore.View where S : PSDKUIKit.PSDKTFState {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(_ store: PSDKUIKit.PSDKTextFieldStore<S>, hint: Swift.String)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit21PSDKTextFieldCalendarV4bodyQrvp", 0) __<S>
}
public struct PSDKButtonStyle {
  public enum Size {
    case auto, small, regular, large
    public static func == (a: PSDKUIKit.PSDKButtonStyle.Size, b: PSDKUIKit.PSDKButtonStyle.Size) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ButtonType {
    case primary, secondary
    public static func == (a: PSDKUIKit.PSDKButtonStyle.ButtonType, b: PSDKUIKit.PSDKButtonStyle.ButtonType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(type: PSDKUIKit.PSDKButtonStyle.ButtonType = .primary, size: PSDKUIKit.PSDKButtonStyle.Size = .small, foregroundColor: (any PSDKUIKit.PSDKColorProvider)? = nil, disableForegroundColor: (any PSDKUIKit.PSDKColorProvider)? = nil, backgroundColor: (any PSDKUIKit.PSDKColorProvider)? = nil, disabledBackgroundColor: (any PSDKUIKit.PSDKColorProvider)? = nil, isRounded: Swift.Bool = true, numberOfLines: Swift.Int? = 1)
}
public struct PSDKThemeKey : SwiftUICore.EnvironmentKey {
  public static let defaultValue: any PSDKUIKit.PSDKThemeProvider
  public typealias Value = any PSDKUIKit.PSDKThemeProvider
}
public struct PSDKStyleKey : SwiftUICore.EnvironmentKey {
  public static let defaultValue: PSDKUIKit.PSDKStyle
  public typealias Value = PSDKUIKit.PSDKStyle
}
extension SwiftUICore.EnvironmentValues {
  public var style: PSDKUIKit.PSDKStyle {
    get
    set
  }
  public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
    set
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func applyTheme(theme: any PSDKUIKit.PSDKThemeProvider, style: PSDKUIKit.PSDKStyle? = nil) -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct PSDKCheckBoxView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(checked: SwiftUICore.Binding<Swift.Bool>)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit16PSDKCheckBoxViewV4bodyQrvp", 0) __
}
public struct PSDKRoundedCorner : SwiftUICore.Shape {
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  public init(radius: CoreFoundation.CGFloat = .infinity, corners: UIKit.UIRectCorner = .allCorners)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  public typealias Body = SwiftUICore._ShapeView<PSDKUIKit.PSDKRoundedCorner, SwiftUICore.ForegroundStyle>
}
@_Concurrency.MainActor @preconcurrency public struct PSDKToast : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public static let short: Swift.Double
  @_Concurrency.MainActor @preconcurrency public static let long: Swift.Double
  @_Concurrency.MainActor @preconcurrency public func body(content: PSDKUIKit.PSDKToast.Content) -> some SwiftUICore.View
  
  public struct PSDKConfig {
    public init(textColor: SwiftUICore.Color = .white, font: SwiftUICore.Font = .system(size: 14), backgroundColor: SwiftUICore.Color = .black.opacity(0.588), duration: Foundation.TimeInterval = PSDKToast.short, transition: SwiftUICore.AnyTransition = .opacity, animation: SwiftUICore.Animation = .linear(duration: 0.3))
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit9PSDKToastV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func toast(message: Swift.String, isShowing: SwiftUICore.Binding<Swift.Bool>, config: PSDKUIKit.PSDKToast.PSDKConfig) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func toast(message: Swift.String, isShowing: SwiftUICore.Binding<Swift.Bool>, duration: Foundation.TimeInterval) -> some SwiftUICore.View
  
}
public enum PSDKLottieName : Swift.String {
  case beginning
  case start
  case identityCongratulations
  case scanDocumentFrontBack
  case login
  case alertCancel
  case timeout
  case congratulations
  case moveYourFace
  case moveYourFaceStop
  case loadingProcessing
  case preloader
  case loadingScreen
  case scanFace
  case moveYourFaceLeft
  case moveYourFaceRight
  case centerYourFace
  case rotateMobile
  case waveVoice
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct PSDKLottieView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public init(_ animationName: PSDKUIKit.PSDKLottieName, loopMode: Lottie.LottieLoopMode = .loop, completion: Lottie.LottieCompletionBlock? = nil, isPlaying: Swift.Bool? = nil)
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: PSDKUIKit.PSDKLottieView.Context) -> some UIKit.UIView
  
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: @_opaqueReturnTypeOf("$s9PSDKUIKit14PSDKLottieViewV10makeUIView7contextQr7SwiftUI0E20RepresentableContextVyACG_tF", 0) __, context: PSDKUIKit.PSDKLottieView.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = @_opaqueReturnTypeOf("$s9PSDKUIKit14PSDKLottieViewV10makeUIView7contextQr7SwiftUI0E20RepresentableContextVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct PSDKTipsView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(model: PSDKUIKit.PSDKInstructionModel, startIndex: Swift.Int = 0)
  @_Concurrency.MainActor @preconcurrency public init?(model: PSDKUIKit.PSDKInstructionModel?, startIndex: Swift.Int = 0)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit12PSDKTipsViewV4bodyQrvp", 0) __
}
public struct PSDKInstructionModel {
  public init(instructions: [Swift.String], showTrailingIcon: Swift.Bool = true)
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func inject<SomeView>(_ view: SomeView) -> some SwiftUICore.View where SomeView : SwiftUICore.View
  
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func introspect<TargetView>(selector: @escaping (PSDKUIKit.PSDKIntrospectionUIView) -> TargetView?, customize: @escaping (TargetView) -> ()) -> some SwiftUICore.View where TargetView : UIKit.UIView
  
  @_Concurrency.MainActor @preconcurrency public func introspectNavigationController(customize: @escaping (UIKit.UINavigationController) -> ()) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func introspectSplitViewController(customize: @escaping (UIKit.UISplitViewController) -> ()) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func introspectViewController(customize: @escaping (UIKit.UIViewController) -> ()) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func introspectTabBarController(customize: @escaping (UIKit.UITabBarController) -> ()) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func introspectTableView(customize: @escaping (UIKit.UITableView) -> ()) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func introspectTableViewCell(customize: @escaping (UIKit.UITableViewCell) -> ()) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func introspectScrollView(customize: @escaping (UIKit.UIScrollView) -> ()) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func introspectTextField(customize: @escaping (UIKit.UITextField) -> ()) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func introspectTextView(customize: @escaping (UIKit.UITextView) -> ()) -> some SwiftUICore.View
  
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func introspectSwitch(customize: @escaping (UIKit.UISwitch) -> ()) -> some SwiftUICore.View
  
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func introspectSlider(customize: @escaping (UIKit.UISlider) -> ()) -> some SwiftUICore.View
  
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func introspectStepper(customize: @escaping (UIKit.UIStepper) -> ()) -> some SwiftUICore.View
  
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func introspectDatePicker(customize: @escaping (UIKit.UIDatePicker) -> ()) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func introspectSegmentedControl(customize: @escaping (UIKit.UISegmentedControl) -> ()) -> some SwiftUICore.View
  
  @available(iOS 14.0, *)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func introspectColorWell(customize: @escaping (UIKit.UIColorWell) -> ()) -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct PSDKTabBarButton : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(icon: SwiftUICore.Image, isSelected: SwiftUICore.Binding<Swift.Bool>)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit16PSDKTabBarButtonV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct PSDKDateTextFieldWrapped : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public init(text: SwiftUICore.Binding<Swift.String>, isFocused: SwiftUICore.Binding<Swift.Bool>, placeholder: Swift.String, style: PSDKUIKit.PSDKTextFieldStyle, locale: Foundation.Locale, isAutomaticSelection: Swift.Bool, didChangeDate: @escaping (Foundation.Date) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: PSDKUIKit.PSDKDateTextFieldWrapped.Context) -> UIKit.UITextField
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: UIKit.UITextField, context: PSDKUIKit.PSDKDateTextFieldWrapped.Context)
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> PSDKUIKit.PSDKDateTextFieldWrapped.Coordinator
  public typealias Body = Swift.Never
  public typealias UIViewType = UIKit.UITextField
}
extension PSDKUIKit.PSDKDateTextFieldWrapped {
  @objc @_Concurrency.MainActor @preconcurrency public class Coordinator : ObjectiveC.NSObject, UIKit.UITextFieldDelegate {
    @_Concurrency.MainActor @preconcurrency public init(parent: PSDKUIKit.PSDKDateTextFieldWrapped)
    @_Concurrency.MainActor @preconcurrency @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
    @_Concurrency.MainActor @preconcurrency @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
    @objc deinit
  }
}
@_Concurrency.MainActor @preconcurrency public struct PSDKCircularProgressBar : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(progress: SwiftUICore.Binding<CoreFoundation.CGFloat>, duration: CoreFoundation.CGFloat, barColor: any PSDKUIKit.PSDKColorProvider)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit23PSDKCircularProgressBarV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct PSDKAnimationCompletionObserverModifier<Value> : SwiftUI.AnimatableModifier where Value : SwiftUICore.VectorArithmetic {
  @_Concurrency.MainActor @preconcurrency public var animatableData: Value {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func body(content: PSDKUIKit.PSDKAnimationCompletionObserverModifier<Value>.Content) -> some SwiftUICore.View
  
  public typealias AnimatableData = Value
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit39PSDKAnimationCompletionObserverModifierV4body7contentQr7SwiftUI05_ViewE8_ContentVyACyxGG_tF", 0) __<Value>
}
extension UIKit.UIImage {
  public func toBase64() -> Swift.String?
  public static var psdkWorldCountries: UIKit.UIImage {
    get
  }
  public static var psdkFailedAttempts: UIKit.UIImage {
    get
  }
  public static var psdkReadyScan: UIKit.UIImage {
    get
  }
  public static var psdkFlashOff: UIKit.UIImage {
    get
  }
  public static var psdkFlashOn: UIKit.UIImage {
    get
  }
  public static var psdkScanBack: UIKit.UIImage {
    get
  }
  public static var psdkScanFront: UIKit.UIImage {
    get
  }
  public static var psdkReadyScanSelfie: UIKit.UIImage {
    get
  }
  public static var psdkRibbons: UIKit.UIImage {
    get
  }
  public static var psdkReadyScanRfid: UIKit.UIImage {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct PSDKEmailTextField<EState> : PSDKUIKit.PSDKGlobalTextField where EState : PSDKUIKit.PSDKTFState {
  @SwiftUICore.ObservedObject @_projectedValueProperty($store) @_Concurrency.MainActor @preconcurrency public var store: PSDKUIKit.PSDKTextFieldStore<EState> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $store: SwiftUICore.ObservedObject<PSDKUIKit.PSDKTextFieldStore<EState>>.Wrapper {
    get
  }
  @SwiftUICore.Environment @_Concurrency.MainActor @preconcurrency public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @SwiftUICore.Environment @_Concurrency.MainActor @preconcurrency public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var startView: SwiftUICore.AnyView?
  @_Concurrency.MainActor @preconcurrency public var endView: SwiftUICore.AnyView?
  @_Concurrency.MainActor @preconcurrency public init(store: PSDKUIKit.PSDKTextFieldStore<EState>, hint: Swift.String, isEditable: Swift.Bool = true, isRequired: Swift.Bool = false)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit13PSDKFieldBasePAAE4bodyQrvp", 0) __<PSDKUIKit.PSDKEmailTextField<EState>>
  public typealias Field = SwiftUI.TextField<SwiftUICore.Text>
  public typealias Store = PSDKUIKit.PSDKTextFieldStore<EState>
}
@_Concurrency.MainActor @preconcurrency public struct PSDKCountryTextField<CTState> : PSDKUIKit.PSDKChooseTextField where CTState : PSDKUIKit.PSDKCountryState {
  @SwiftUICore.Environment @_Concurrency.MainActor @preconcurrency public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @SwiftUICore.Environment @_Concurrency.MainActor @preconcurrency public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @SwiftUICore.ObservedObject @_projectedValueProperty($store) @_Concurrency.MainActor @preconcurrency public var store: PSDKUIKit.PSDKChooseStore<CTState> {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $store: SwiftUICore.ObservedObject<PSDKUIKit.PSDKChooseStore<CTState>>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var endView: SwiftUICore.AnyView?
  @_Concurrency.MainActor @preconcurrency public var startView: SwiftUICore.AnyView?
  @_Concurrency.MainActor @preconcurrency public var modalRouter: PSDKUIKit.PSDKModalRouter
  @_Concurrency.MainActor @preconcurrency public let modalHint: Swift.String
  @_Concurrency.MainActor @preconcurrency public func dropdownElement(_ item: PSDKUIKit.PSDKCountryTextField<CTState>.Item) -> PSDKUIKit.PSDKDropdownOptionElement<PSDKUIKit.PSDKCountryTextField<CTState>.Item>
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(_ store: PSDKUIKit.PSDKChooseStore<CTState>, hint: Swift.String, isRequired: Swift.Bool = false, modalHint: Swift.String = "", modalRouter: PSDKUIKit.PSDKModalRouter, handler: PSDKUIKit.PSDKTextValidationHandler? = nil)
  @_Concurrency.MainActor @preconcurrency public func getStartView() -> SwiftUICore.AnyView?
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit20PSDKCountryTextFieldV4bodyQrvp", 0) __<CTState>
  public typealias Field = SwiftUI.TextField<SwiftUICore.Text>
  public typealias Store = PSDKUIKit.PSDKChooseStore<CTState>
}
@_Concurrency.MainActor @preconcurrency public struct PSDKInstructionItem : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(position: Swift.Int, description: Swift.String, content: SwiftUICore.AnyView? = nil)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit19PSDKInstructionItemV4bodyQrvp", 0) __
}
extension UIKit.UIImage {
  public static var psdkEmail: UIKit.UIImage {
    get
  }
  public static var psdkWeb: UIKit.UIImage {
    get
  }
  public static var psdkNavigationClose: UIKit.UIImage {
    get
  }
  public static var psdkNavigationCloseLight: UIKit.UIImage {
    get
  }
  public static var psdkNavigationBackButton: UIKit.UIImage {
    get
  }
  public static var psdkNavigationBackButtonLight: UIKit.UIImage {
    get
  }
  public static var locationOnActive: UIKit.UIImage {
    get
  }
  public static var arrowDropUpBlack: UIKit.UIImage {
    get
  }
  public static var arrowDropDownBlack: UIKit.UIImage {
    get
  }
  public static var arrowDropDown: UIKit.UIImage {
    get
  }
  public static var arrowDropUp: UIKit.UIImage {
    get
  }
  public static var personActive: UIKit.UIImage {
    get
  }
  public static var calendarTodayActive: UIKit.UIImage {
    get
  }
  public static var iconSearch: UIKit.UIImage {
    get
  }
  public static var done: UIKit.UIImage {
    get
  }
  public static var psdkEditIcon: UIKit.UIImage {
    get
  }
  public static var regulaIcon: UIKit.UIImage {
    get
  }
  public static var psdkMoreVert: UIKit.UIImage {
    get
  }
  public static var psdkDelete: UIKit.UIImage {
    get
  }
  public static var psdkHelpIcon: UIKit.UIImage {
    get
  }
  public static var psdkDangerRedIcon: UIKit.UIImage {
    get
  }
  public static var psdkInfoError: UIKit.UIImage {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct PSDKTextField<PTState> : PSDKUIKit.PSDKGlobalTextField where PTState : PSDKUIKit.PSDKTFState {
  @SwiftUICore.ObservedObject @_projectedValueProperty($store) @_Concurrency.MainActor @preconcurrency public var store: PSDKUIKit.PSDKTextFieldStore<PTState> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $store: SwiftUICore.ObservedObject<PSDKUIKit.PSDKTextFieldStore<PTState>>.Wrapper {
    get
  }
  @SwiftUICore.Environment @_Concurrency.MainActor @preconcurrency public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @SwiftUICore.Environment @_Concurrency.MainActor @preconcurrency public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var startView: SwiftUICore.AnyView?
  @_Concurrency.MainActor @preconcurrency public var endView: SwiftUICore.AnyView?
  @_Concurrency.MainActor @preconcurrency public init(store: PSDKUIKit.PSDKTextFieldStore<PTState>, hint: Swift.String, isRequired: Swift.Bool = false)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit13PSDKFieldBasePAAE4bodyQrvp", 0) __<PSDKUIKit.PSDKTextField<PTState>>
  public typealias Field = SwiftUI.TextField<SwiftUICore.Text>
  public typealias Store = PSDKUIKit.PSDKTextFieldStore<PTState>
}
extension SwiftUICore.Font {
  public static var psdkB48: SwiftUICore.Font {
    get
  }
  public static var psdkB50: SwiftUICore.Font {
    get
  }
  public static var psdkF50: SwiftUICore.Font {
    get
  }
  public static var psdkB42: SwiftUICore.Font {
    get
  }
  public static var psdkF42: SwiftUICore.Font {
    get
  }
  public static var psdkB38: SwiftUICore.Font {
    get
  }
  public static var psdkF38: SwiftUICore.Font {
    get
  }
  public static var psdkB32: SwiftUICore.Font {
    get
  }
  public static var psdkF32: SwiftUICore.Font {
    get
  }
  public static var psdkB28: SwiftUICore.Font {
    get
  }
  public static var psdkF26: SwiftUICore.Font {
    get
  }
  public static var psdkB26: SwiftUICore.Font {
    get
  }
  public static var psdkF24: SwiftUICore.Font {
    get
  }
  public static var psdkB24: SwiftUICore.Font {
    get
  }
  public static var psdkB20: SwiftUICore.Font {
    get
  }
  public static var psdkF20: SwiftUICore.Font {
    get
  }
  public static var psdkF18: SwiftUICore.Font {
    get
  }
  public static var psdkB18: SwiftUICore.Font {
    get
  }
  public static var psdkF16: SwiftUICore.Font {
    get
  }
  public static var psdkB16: SwiftUICore.Font {
    get
  }
  public static var psdkF15: SwiftUICore.Font {
    get
  }
  public static var psdkF14: SwiftUICore.Font {
    get
  }
  public static var psdkB14: SwiftUICore.Font {
    get
  }
  public static var psdkF12: SwiftUICore.Font {
    get
  }
  public static var psdkB12: SwiftUICore.Font {
    get
  }
  public static func custom(type: Swift.String, size: CoreFoundation.CGFloat) -> SwiftUICore.Font
}
extension UIKit.UIFont {
  public static func loadFonts(titleFont: @escaping () -> PSDKUIKit.Fonts, paragraphFont: @escaping () -> PSDKUIKit.Fonts)
  public static var psdkB48: UIKit.UIFont {
    get
  }
  public static var psdkF48: UIKit.UIFont {
    get
  }
  public static var psdkB32: UIKit.UIFont {
    get
  }
  public static var psdkF32: UIKit.UIFont {
    get
  }
  public static var psdkB28: UIKit.UIFont {
    get
  }
  public static var psdkF28: UIKit.UIFont {
    get
  }
  public static var psdkF26: UIKit.UIFont {
    get
  }
  public static var psdkB26: UIKit.UIFont {
    get
  }
  public static var psdkF24: UIKit.UIFont {
    get
  }
  public static var psdkB24: UIKit.UIFont {
    get
  }
  public static var psdkF20: UIKit.UIFont {
    get
  }
  public static var psdkB20: UIKit.UIFont {
    get
  }
  public static var psdkF18: UIKit.UIFont {
    get
  }
  public static var psdkB18: UIKit.UIFont {
    get
  }
  public static var psdkF16: UIKit.UIFont {
    get
  }
  public static var psdkB16: UIKit.UIFont {
    get
  }
  public static var psdkF14: UIKit.UIFont {
    get
  }
  public static var psdkF12: UIKit.UIFont {
    get
  }
  public static var psdkB12: UIKit.UIFont {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public static func custom(name: Swift.String, size: CoreFoundation.CGFloat) -> UIKit.UIFont
}
public enum Fonts : Swift.String {
  case hint
  case arial
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct PSDKProgressView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(text: Swift.String? = nil)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit16PSDKProgressViewV4bodyQrvp", 0) __
}
public typealias PSDKTextValidationHandler = (_ text: Swift.String, _ currentStatus: PSDKUIKit.PSDKValidationResult) -> PSDKUIKit.PSDKValidationResult
public enum PSDKValidationResult : Swift.Equatable {
  case none
  case valid
  case invalid(_: Swift.String? = nil)
  case warning
  public static func == (a: PSDKUIKit.PSDKValidationResult, b: PSDKUIKit.PSDKValidationResult) -> Swift.Bool
}
@_Concurrency.MainActor @preconcurrency public struct PSDKAccordionView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(showAccordion: SwiftUICore.Binding<Swift.Bool>, title: Swift.String, startIcon: SwiftUICore.Image? = Image.psdkHelpIcon, content: @escaping () -> Content)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit17PSDKAccordionViewV4bodyQrvp", 0) __<Content>
}
@_Concurrency.MainActor @preconcurrency public struct PSDKText : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init?(_ text: Swift.String?, textColor: PSDKUIKit.PSDKColor = .onSurfaceGray400, font: SwiftUICore.Font = .psdkF18, alignment: SwiftUICore.TextAlignment = .leading)
  @_Concurrency.MainActor @preconcurrency public init?(_ text: Swift.String?, textColor: any PSDKUIKit.PSDKColorProvider = PSDKColor.onSurfaceGray400, font: SwiftUICore.Font = .psdkF18, alignment: SwiftUICore.TextAlignment = .leading)
  @_Concurrency.MainActor @preconcurrency public init(_ text: Swift.String, textColor: PSDKUIKit.PSDKColor = .onSurfaceGray400, font: SwiftUICore.Font = .psdkF18, alignment: SwiftUICore.TextAlignment = .leading)
  @_Concurrency.MainActor @preconcurrency public func foregroundColor(_ color: any PSDKUIKit.PSDKColorProvider) -> PSDKUIKit.PSDKText
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit8PSDKTextV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct PSDKContentText : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init?(_ text: Swift.String?, textColor: PSDKUIKit.PSDKColor = .onSurfaceGray400, font: SwiftUICore.Font = .psdkF18, alignment: SwiftUICore.TextAlignment = .leading)
  @_Concurrency.MainActor @preconcurrency public init?(_ text: Swift.String?, textColor: any PSDKUIKit.PSDKColorProvider = PSDKColor.onSurfaceGray400, font: SwiftUICore.Font = .psdkF18, alignment: SwiftUICore.TextAlignment = .leading)
  @_Concurrency.MainActor @preconcurrency public init(_ text: Swift.String, textColor: PSDKUIKit.PSDKColor = .onSurfaceGray400, font: SwiftUICore.Font = .psdkF18, alignment: SwiftUICore.TextAlignment = .leading)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit15PSDKContentTextV4bodyQrvp", 0) __
}
extension UIKit.UIColor {
  public static func brandAccent(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func brandBackgroundMain(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func brandSecondary(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func onSurfaceLight(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func onSurfaceGray100(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func onSurfaceGray200(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func onSurfaceGray300(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func onSurfaceGray400(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func onSurfaceDark(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func semanticRed(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func semanticYellow(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public static func semanticGreen(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
}
extension SwiftUICore.Color {
  public static func brandBackgroundMain(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUICore.Color
  public static func brandSecondary(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUICore.Color
  public static func brandAccent(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUICore.Color
  public static func onSurfaceGray100(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUICore.Color
  public static func onSurfaceGray200(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUICore.Color
  public static func onSurfaceGray300(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUICore.Color
  public static func onSurfaceGray400(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUICore.Color
  public static func onSurfaceDark(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUICore.Color
  public static func semanticRed(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUICore.Color
  public static func semanticYellow(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUICore.Color
  public static func semanticGreen(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUICore.Color
  public static func onSurfaceLight(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUICore.Color
}
public struct PSDKCircleWindows : SwiftUICore.Shape {
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  public init(size: CoreFoundation.CGSize, origin: CoreFoundation.CGPoint)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  public typealias Body = SwiftUICore._ShapeView<PSDKUIKit.PSDKCircleWindows, SwiftUICore.ForegroundStyle>
}
@_Concurrency.MainActor @preconcurrency public struct PSDKPhoneTextField<PTState> : PSDKUIKit.PSDKChooseTextField where PTState : PSDKUIKit.PSDKCountryState {
  @SwiftUICore.ObservedObject @_projectedValueProperty($store) @_Concurrency.MainActor @preconcurrency public var store: PSDKUIKit.PSDKChooseStore<PTState> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $store: SwiftUICore.ObservedObject<PSDKUIKit.PSDKChooseStore<PTState>>.Wrapper {
    get
  }
  @SwiftUICore.Environment @_Concurrency.MainActor @preconcurrency public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @SwiftUICore.Environment @_Concurrency.MainActor @preconcurrency public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var endView: SwiftUICore.AnyView?
  @_Concurrency.MainActor @preconcurrency public let modalHint: Swift.String
  @_Concurrency.MainActor @preconcurrency public let modalRouter: PSDKUIKit.PSDKModalRouter
  @_Concurrency.MainActor @preconcurrency public var pressMode: PSDKUIKit.PressedMode
  @_Concurrency.MainActor @preconcurrency public let showEndView: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public let showSharedField: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var startView: SwiftUICore.AnyView? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func dropdownElement(_ item: PSDKUIKit.PSDKPhoneTextField<PTState>.Item) -> PSDKUIKit.PSDKDropdownOptionElement<PSDKUIKit.PSDKPhoneTextField<PTState>.Item>
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(store: PSDKUIKit.PSDKChooseStore<PTState>, hint: Swift.String, modalHint: Swift.String = "", modalRouter: PSDKUIKit.PSDKModalRouter)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit18PSDKPhoneTextFieldV4bodyQrvp", 0) __<PTState>
  public typealias Field = SwiftUI.TextField<SwiftUICore.Text>
  public typealias Store = PSDKUIKit.PSDKChooseStore<PTState>
}
@_Concurrency.MainActor @preconcurrency public struct RadioButtonGroups : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public static let nothing: Swift.Int
  @_Concurrency.MainActor @preconcurrency public let labels: [PSDKUIKit.RadioButtonModel]
  @_Concurrency.MainActor @preconcurrency public let callback: (Swift.Int) -> ()
  @_Concurrency.MainActor @preconcurrency public var selectedID: Foundation.UUID? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(selectedIndex: SwiftUICore.Binding<Swift.Int>, labels: [PSDKUIKit.RadioButtonModel], callback: @escaping (Swift.Int) -> ())
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit17RadioButtonGroupsV4bodyQrvp", 0) __
}
public struct RadioButtonModel : Swift.Identifiable {
  public var id: Foundation.UUID
  public let code: Swift.String
  public let description: Swift.String
  public init(_ code: Swift.String, _ description: Swift.String)
  public typealias ID = Foundation.UUID
}
@_Concurrency.MainActor @preconcurrency public struct InterrogativeFloatButton : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(action: @escaping () -> Swift.Void)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit24InterrogativeFloatButtonV4bodyQrvp", 0) __
}
public struct PSDKTextFieldAttributes {
  public enum Style {
    case compact
    case normal
    public static func == (a: PSDKUIKit.PSDKTextFieldAttributes.Style, b: PSDKUIKit.PSDKTextFieldAttributes.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let infinity: Swift.Int
  public var font: UIKit.UIFont
  public var hint: Swift.String
  public var formatRegex: Swift.String
  public var editable: Swift.Bool
  public var isRequired: Swift.Bool
  public var minLength: Swift.Int
  public var maxLength: Swift.Int
  public var kerning: CoreFoundation.CGFloat
  public var lineColor: PSDKUIKit.PSDKTextFieldAttributes.Colors?
  public var hintColor: PSDKUIKit.PSDKTextFieldAttributes.Colors?
  public var textColor: PSDKUIKit.PSDKTextFieldAttributes.Colors?
  public var style: PSDKUIKit.PSDKTextFieldAttributes.Style
  public var alignment: SwiftUICore.TextAlignment
  public var autocapitalization: UIKit.UITextAutocapitalizationType
  public var keyboardType: UIKit.UIKeyboardType
  public init(font: UIKit.UIFont = .psdkF18, hint: Swift.String = "", editable: Swift.Bool = true, isRequired: Swift.Bool = false, formatRegex: Swift.String = "(?s).*", minLength: Swift.Int = 0, maxLength: Swift.Int = infinity, kerning: CoreFoundation.CGFloat = 0, hintColor: PSDKUIKit.PSDKTextFieldAttributes.Colors? = nil, lineColor: PSDKUIKit.PSDKTextFieldAttributes.Colors? = nil, float: PSDKUIKit.PSDKTextFieldAttributes.Colors? = nil, textColor: PSDKUIKit.PSDKTextFieldAttributes.Colors? = nil, style: PSDKUIKit.PSDKTextFieldAttributes.Style = .normal, alignment: SwiftUICore.TextAlignment = .leading, autocapitalization: UIKit.UITextAutocapitalizationType = .sentences, keyboardType: UIKit.UIKeyboardType = .default)
}
extension PSDKUIKit.PSDKTextFieldAttributes {
  public struct Colors {
    public let normal: any PSDKUIKit.PSDKColorProvider
    public let focused: any PSDKUIKit.PSDKColorProvider
    public let error: any PSDKUIKit.PSDKColorProvider
    public init(normal: any PSDKUIKit.PSDKColorProvider, focused: any PSDKUIKit.PSDKColorProvider, error: any PSDKUIKit.PSDKColorProvider)
    public init(color: any PSDKUIKit.PSDKColorProvider)
    public func getColor<Store>(store: Store) -> any PSDKUIKit.PSDKColorProvider where Store : PSDKUIKit.PSDKTextFieldStoreProtocol
  }
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor @preconcurrency public func endEditing()
}
@_hasMissingDesignatedInitializers public class PSDKApplicationUtil {
  @available(iOSApplicationExtension, unavailable)
  public class func endEditing()
  @objc deinit
}
public protocol PSDKImageProvider {
  var uiImage: UIKit.UIImage { get }
  var image: SwiftUICore.Image { get }
}
extension PSDKUIKit.PSDKImageProvider {
  public var image: SwiftUICore.Image {
    get
  }
  public var body: PSDKUIKit.PSDKImageView {
    get
  }
  public func foregroundColor(_ color: any PSDKUIKit.PSDKColorProvider) -> PSDKUIKit.PSDKImageView
  public func foregroundColor(_ color: PSDKUIKit.PSDKColor) -> PSDKUIKit.PSDKImageView
  public func setResizable(isResizable: Swift.Bool = true) -> PSDKUIKit.PSDKImageView
}
public enum PSDKImage : Swift.String {
  case icClose
  case icInfo
  case icCheckAccent
  case icWarning
  case icSuccess
  case icPasswordShowed
  case icPasswordHidden
  case icFailMessage
  case icMicrophone
  case icEditButton
  case cornerBorderShape
  case ribbons
  case psdkInfoError
  case psdkError
  case psdkNoConnection
  case icInterrogative
  case icArrowBottomSmall
  case closeInCircle
  case icPreventorButton
  case icChooseFile
  case icPhotoLibrary
  case icTakePhoto
  case circleDashed
  case selfieBackground
  case videoAndVoiceAuth
  case voiceDetection
  case psdkCapture
  case icRadioOff
  case icRadioOn
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension PSDKUIKit.PSDKImage : PSDKUIKit.PSDKImageProvider, SwiftUICore.View {
  public var uiImage: UIKit.UIImage {
    get
  }
  public var image: SwiftUICore.Image {
    get
  }
  public typealias Body = PSDKUIKit.PSDKImageView
}
@_Concurrency.MainActor @preconcurrency public struct PSDKImageView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func foregroundColor(_ color: PSDKUIKit.PSDKColor) -> PSDKUIKit.PSDKImageView
  @_Concurrency.MainActor @preconcurrency public func foregroundColor(_ color: any PSDKUIKit.PSDKColorProvider) -> PSDKUIKit.PSDKImageView
  @_Concurrency.MainActor @preconcurrency public func setResizable(isResizable: Swift.Bool = true) -> PSDKUIKit.PSDKImageView
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit13PSDKImageViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct PSDKExpandableText : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ text: Swift.String, lineLimit: Swift.Int = 3, font: UIKit.UIFont = .psdkF14, foregroundColor: any PSDKUIKit.PSDKColorProvider = PSDKColor.onSurfaceGray300, coloredColor: any PSDKUIKit.PSDKColorProvider = PSDKColor.brandAccent, moreMessage: Swift.String = "more", lessMessage: Swift.String = "less")
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit18PSDKExpandableTextV4bodyQrvp", 0) __
}
public protocol PSDKColorProvider {
  var name: Swift.String { get }
  var group: Swift.String { get }
  func uiColor(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  func color(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUICore.Color
}
extension PSDKUIKit.PSDKColorProvider {
  public var body: PSDKUIKit.ThemeColorReader {
    get
  }
}
extension PSDKUIKit.PSDKColorProvider {
  public func uiColor(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> UIKit.UIColor
  public func color(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUICore.Color
}
@_Concurrency.MainActor @preconcurrency public enum PSDKEmpasisColor : Swift.String, PSDKUIKit.PSDKColorProvider, SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var group: Swift.String {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var name: Swift.String {
    get
  }
  case high
  case medium
  case low
  nonisolated public init?(rawValue: Swift.String)
  public typealias Body = PSDKUIKit.ThemeColorReader
  public typealias RawValue = Swift.String
  nonisolated public var rawValue: Swift.String {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public enum PSDKTertiaryColor : Swift.String, PSDKUIKit.PSDKColorProvider, SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var group: Swift.String {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var name: Swift.String {
    get
  }
  case purple100
  case purple200
  case purple300
  case purple400
  case purple500
  case pink
  case amber
  case lime
  nonisolated public init?(rawValue: Swift.String)
  public typealias Body = PSDKUIKit.ThemeColorReader
  public typealias RawValue = Swift.String
  nonisolated public var rawValue: Swift.String {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public enum PSDKColor : PSDKUIKit.PSDKColorProvider, SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public enum Brand : Swift.String, PSDKUIKit.PSDKColorProvider, SwiftUICore.View {
    case backgroundMain
    case secondary
    case accent
    @_Concurrency.MainActor @preconcurrency public var name: Swift.String {
      get
    }
    @_Concurrency.MainActor @preconcurrency public var group: Swift.String {
      get
    }
    nonisolated public init?(rawValue: Swift.String)
    public typealias Body = PSDKUIKit.ThemeColorReader
    public typealias RawValue = Swift.String
    nonisolated public var rawValue: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public enum Surface : Swift.String, PSDKUIKit.PSDKColorProvider, SwiftUICore.View {
    case gray0
    case gray100
    case gray200
    case gray300
    case gray400
    @_Concurrency.MainActor @preconcurrency public var name: Swift.String {
      get
    }
    @_Concurrency.MainActor @preconcurrency public var group: Swift.String {
      get
    }
    nonisolated public init?(rawValue: Swift.String)
    public typealias Body = PSDKUIKit.ThemeColorReader
    public typealias RawValue = Swift.String
    nonisolated public var rawValue: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var name: Swift.String {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var group: Swift.String {
    get
  }
  case brandBackgroundMain
  case brandSecondary
  case brandAccent
  case onSurfaceGray100
  case onSurfaceGray200
  case onSurfaceGray300
  case onSurfaceGray400
  case onSurfaceDark
  case semanticRed
  case semanticYellow
  case semanticGreen
  case onSurfaceLight
  nonisolated public static func == (a: PSDKUIKit.PSDKColor, b: PSDKUIKit.PSDKColor) -> Swift.Bool
  nonisolated public func hash(into hasher: inout Swift.Hasher)
  public typealias Body = PSDKUIKit.ThemeColorReader
  nonisolated public var hashValue: Swift.Int {
    get
  }
}
extension CoreFoundation.CGPoint {
  public func distanceTo(_ point: CoreFoundation.CGPoint) -> Swift.Double
  public func rotate(aroundOrigin origin: CoreFoundation.CGPoint, byDegrees: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  public func createVector(_ point: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
}
public protocol PSDKChooseTextField : PSDKUIKit.PSDKTextFieldBase where Self.Store : PSDKUIKit.ChooseStore {
  typealias Item = Self.Store.Item
  var showEndView: Swift.Bool { get }
  var modalHint: Swift.String { get }
  var modalRouter: PSDKUIKit.PSDKModalRouter { get }
  var pressMode: PSDKUIKit.PressedMode { get }
  var showSharedField: Swift.Bool { get }
  func dropdownElement(_ item: Self.Item) -> PSDKUIKit.PSDKDropdownOptionElement<Self.Item>
}
extension PSDKUIKit.PSDKChooseTextField {
  public var startViewModifier: SwiftUICore.AnyView? {
    get
  }
  public var endViewModifier: SwiftUICore.AnyView? {
    get
  }
  public var showEndView: Swift.Bool {
    get
  }
  public var modalHint: Swift.String {
    get
  }
  public var pressMode: PSDKUIKit.PressedMode {
    get
  }
  public var showSharedField: Swift.Bool {
    get
  }
  public var chooseContentBody: some SwiftUICore.View {
    get
  }
  public var body: some SwiftUICore.View {
    get
  }
}
public typealias PlatformView = UIKit.UIView
public typealias PlatformViewController = UIKit.UIViewController
public enum Introspect {
  public static func findChild<AnyViewType>(ofType type: AnyViewType.Type, in root: PSDKUIKit.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func findChild<AnyViewControllerType>(ofType type: AnyViewControllerType.Type, in root: PSDKUIKit.PlatformViewController) -> AnyViewControllerType? where AnyViewControllerType : UIKit.UIViewController
  public static func findChildUsingFrame<AnyViewType>(ofType type: AnyViewType.Type, in root: PSDKUIKit.PlatformView, from originalEntry: PSDKUIKit.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func previousSibling<AnyViewType>(containing type: AnyViewType.Type, from entry: PSDKUIKit.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func previousSibling<AnyViewType>(ofType type: AnyViewType.Type, from entry: PSDKUIKit.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  @available(macOS, unavailable)
  public static func previousSibling<AnyViewControllerType>(containing type: AnyViewControllerType.Type, from entry: PSDKUIKit.PlatformViewController) -> AnyViewControllerType? where AnyViewControllerType : UIKit.UIViewController
  public static func previousSibling<AnyViewControllerType>(ofType type: AnyViewControllerType.Type, from entry: PSDKUIKit.PlatformViewController) -> AnyViewControllerType? where AnyViewControllerType : UIKit.UIViewController
  public static func nextSibling<AnyViewType>(containing type: AnyViewType.Type, from entry: PSDKUIKit.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func nextSibling<AnyViewType>(ofType type: AnyViewType.Type, from entry: PSDKUIKit.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func findAncestor<AnyViewType>(ofType type: AnyViewType.Type, from entry: PSDKUIKit.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func findAncestorOrAncestorChild<AnyViewType>(ofType type: AnyViewType.Type, from entry: PSDKUIKit.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func findHostingView(from entry: PSDKUIKit.PlatformView) -> PSDKUIKit.PlatformView?
  public static func findViewHost(from entry: PSDKUIKit.PlatformView) -> PSDKUIKit.PlatformView?
}
public enum TargetViewSelector {
  public static func siblingContaining<TargetView>(from entry: PSDKUIKit.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func siblingContainingOrAncestor<TargetView>(from entry: PSDKUIKit.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func siblingContainingOrAncestorOrAncestorChild<TargetView>(from entry: PSDKUIKit.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func siblingOfType<TargetView>(from entry: PSDKUIKit.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func siblingOfTypeOrAncestor<TargetView>(from entry: PSDKUIKit.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func ancestorOrSiblingContaining<TargetView>(from entry: PSDKUIKit.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func ancestorOrSiblingOfType<TargetView>(from entry: PSDKUIKit.PlatformView) -> TargetView? where TargetView : UIKit.UIView
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class PSDKOldBarButton : UIKit.UIBarButtonItem {
  @_Concurrency.MainActor @preconcurrency public init(image: UIKit.UIImage?, style: UIKit.UIBarButtonItem.Style, customAction: @escaping () -> Swift.Void = {})
  @objc deinit
}
public protocol PSDKBarButtonDelegate : AnyObject {
  func backAction(button: PSDKUIKit.PSDKBarButton)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class PSDKBarButton : UIKit.UIBarButtonItem {
  @_Concurrency.MainActor @preconcurrency public init(image: UIKit.UIImage?, style: UIKit.UIBarButtonItem.Style, delegate: (any PSDKUIKit.PSDKBarButtonDelegate)? = nil)
  @objc deinit
}
extension Foundation.Bundle {
  public static func getPhones(first ic: Swift.String? = nil, complete: @escaping ([PSDKUIKit.PSDKCountryModel]) -> Swift.Void)
  public static func getPhones() -> [PSDKUIKit.PSDKCountryModel]
}
@_Concurrency.MainActor @preconcurrency public struct ThemeColorReader : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: SwiftUICore.Color {
    get
  }
  public typealias Body = SwiftUICore.Color
}
@_Concurrency.MainActor @preconcurrency public struct PSDKColorReader : PSDKUIKit.PSDKColorProvider, SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var name: Swift.String
  @_Concurrency.MainActor @preconcurrency public var group: Swift.String
  @_Concurrency.MainActor @preconcurrency public var opacity: Swift.Double
  @_Concurrency.MainActor @preconcurrency public func color(_ theme: any PSDKUIKit.PSDKThemeProvider, _ style: PSDKUIKit.PSDKStyle) -> SwiftUICore.Color
  public typealias Body = PSDKUIKit.ThemeColorReader
}
public enum ActionSheetSize {
  case standard
  case middle
  case full
  case flex
  public func getHeight(screnSize: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat?
  public static func == (a: PSDKUIKit.ActionSheetSize, b: PSDKUIKit.ActionSheetSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct PSDKDraggableView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public enum DragDirection {
    case vertical, horizontal, downwards, upwards
    public static func == (a: PSDKUIKit.PSDKDraggableView<Content>.DragDirection, b: PSDKUIKit.PSDKDraggableView<Content>.DragDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public init(dragDirection: PSDKUIKit.PSDKDraggableView<Content>.DragDirection, minimumDrag: CoreFoundation.CGFloat, didDrag: @escaping () -> Swift.Void, @SwiftUICore.ViewBuilder _ content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit17PSDKDraggableViewV4bodyQrvp", 0) __<Content>
}
public enum WechatCompressType {
  case session
  case timeline
  public static func == (a: PSDKUIKit.WechatCompressType, b: PSDKUIKit.WechatCompressType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIImage {
  public func resized(to size: CoreFoundation.CGSize) -> UIKit.UIImage
  public func wxCompress(type: PSDKUIKit.WechatCompressType = .timeline) -> Foundation.Data?
}
extension Swift.String {
  public func appendToURL(_ fileURL: Foundation.URL) throws
  public func isRTLText() -> Swift.Bool
  public func parseRichTextElements() -> [PSDKUIKit.PSDKStringBold.PSDKElement]
  public subscript(range: Swift.Range<Swift.Int>) -> Swift.String {
    get
  }
  public func with(_ text: Swift.String) -> Swift.String
  public func isValidWithRegex(_ regex: Swift.String) -> Swift.Bool
  public func removeCharacters(_ regexPattern: Swift.String) -> Swift.String
  public func trimmingWhiteSpaces() -> Swift.String
  public func fromBase64() -> Swift.String?
  public func toBase64() -> Swift.String
  public func hexStringToByteArray() -> Foundation.Data?
  public func hexStringToUIColor() -> UIKit.UIColor
  public func toColorComponets() -> [CoreFoundation.CGFloat]
  public func width(withHeight constrainedHeight: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGFloat
  public func height(withWidth constrainedWidth: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGFloat
}
public class PSDKModalRouter : Combine.ObservableObject {
  public init()
  public init(root: PSDKUIKit.PSDKModalRoute)
  public func pushRoute(_ route: PSDKUIKit.PSDKModalRoute)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct PSDKModalRoute : Swift.Equatable {
  public init(@SwiftUICore.ViewBuilder view: () -> SwiftUICore.AnyView)
  public static func == (lhs: PSDKUIKit.PSDKModalRoute, rhs: PSDKUIKit.PSDKModalRoute) -> Swift.Bool
}
@_Concurrency.MainActor @preconcurrency public struct PSDKOtpTextField<OTPState> : PSDKUIKit.PSDKTextFieldBase where OTPState : PSDKUIKit.PSDKTFState {
  @SwiftUICore.ObservedObject @_projectedValueProperty($store) @_Concurrency.MainActor @preconcurrency public var store: PSDKUIKit.PSDKTextFieldStore<OTPState> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $store: SwiftUICore.ObservedObject<PSDKUIKit.PSDKTextFieldStore<OTPState>>.Wrapper {
    get
  }
  @SwiftUICore.Environment @_Concurrency.MainActor @preconcurrency public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @SwiftUICore.Environment @_Concurrency.MainActor @preconcurrency public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var content: SwiftUICore.AnyView?
  @_Concurrency.MainActor @preconcurrency public var startView: SwiftUICore.AnyView?
  @_Concurrency.MainActor @preconcurrency public var endView: SwiftUICore.AnyView?
  @_Concurrency.MainActor @preconcurrency public var showHint: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public init(_ store: PSDKUIKit.PSDKTextFieldStore<OTPState>, _ hint: Swift.String = "", _ messages: PSDKUIKit.PSDKTextFieldMessages = .init(), handler: PSDKUIKit.PSDKTextValidationHandler? = nil, onChanged: ((Swift.String) -> Swift.Void)? = nil, onSubmit: ((PSDKUIKit.PSDKValidationResult) -> Swift.Void)? = nil)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit13PSDKFieldBasePAAE4bodyQrvp", 0) __<PSDKUIKit.PSDKOtpTextField<OTPState>>
  public typealias Field = SwiftUI.TextField<SwiftUICore.Text>
  public typealias Store = PSDKUIKit.PSDKTextFieldStore<OTPState>
}
public enum PSDKDisplayLinkProgress {
  case decimal(precision: Swift.Int? = nil)
  case seconds(precision: Swift.Int? = nil)
}
@objc public class PSDKDisplayLinkBinding : ObjectiveC.NSObject, Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($progress) public var progress: Swift.Double {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $progress: Combine.Published<Swift.Double>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var onComplete: (() -> Swift.Void)?
  public var isPaused: Swift.Bool {
    get
  }
  public init(preferredFramesPerSecond: Swift.Int, displayProgress: PSDKUIKit.PSDKDisplayLinkProgress = .decimal())
  public func run(for duration: CoreFoundation.CFTimeInterval)
  @objc public func tick()
  public func invalidate()
  @objc deinit
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
extension SwiftUICore.Image {
  public static var psdkEmail: SwiftUICore.Image {
    get
  }
  public static var psdkWeb: SwiftUICore.Image {
    get
  }
  public static var regulaIcon: SwiftUICore.Image {
    get
  }
  public static var psdkNavigationClose: SwiftUICore.Image {
    get
  }
  public static var psdkNavigationCloseLight: SwiftUICore.Image {
    get
  }
  public static var psdkNavigationBackButton: SwiftUICore.Image {
    get
  }
  public static var psdkNavigationBackButtonLight: SwiftUICore.Image {
    get
  }
  public static var locationOnActive: SwiftUICore.Image {
    get
  }
  public static var arrowDropUpBlack: SwiftUICore.Image {
    get
  }
  public static var arrowDropUp: SwiftUICore.Image {
    get
  }
  public static var arrowDropDownBlack: SwiftUICore.Image {
    get
  }
  public static var arrowDropDown: SwiftUICore.Image {
    get
  }
  public static var personActive: SwiftUICore.Image {
    get
  }
  public static var calendarTodayActive: SwiftUICore.Image {
    get
  }
  public static var iconSearch: SwiftUICore.Image {
    get
  }
  public static var done: SwiftUICore.Image {
    get
  }
  public static var psdkEditIcon: SwiftUICore.Image {
    get
  }
  public static var psdkEllipsis: SwiftUICore.Image {
    get
  }
  public static var psdkMoreVert: SwiftUICore.Image {
    get
  }
  public static var psdkPencil: SwiftUICore.Image {
    get
  }
  public static var psdkDelete: SwiftUICore.Image {
    get
  }
  public static var psdkHelpIcon: SwiftUICore.Image {
    get
  }
  public static var psdkDangerRedIcon: SwiftUICore.Image {
    get
  }
  public static var psdkInfoError: SwiftUICore.Image {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct PrivacyPolicyView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(agreements: Swift.String)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit17PrivacyPolicyViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct PSDKCloseTextField<Store> : SwiftUICore.View where Store : PSDKUIKit.PSDKTextFieldStoreProtocol, Store.StateType : PSDKUIKit.PSDKSecureState {
  @SwiftUICore.Environment @_Concurrency.MainActor @preconcurrency public var theme: any PSDKUIKit.PSDKThemeProvider {
    get
  }
  @SwiftUICore.Environment @_Concurrency.MainActor @preconcurrency public var style: PSDKUIKit.PSDKStyle {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init?(store: Store)
  public typealias Body = @_opaqueReturnTypeOf("$s9PSDKUIKit18PSDKCloseTextFieldV4bodyQrvp", 0) __<Store>
}
extension PSDKUIKit.PSDKFieldBase {
  public func isEditable(isEditable: Swift.Bool) -> Self
  public func isRequired(_ flag: Swift.Bool = true) -> Self
  public func withStartView<Content>(_ view: @escaping () -> Content?) -> Self where Content : SwiftUICore.View
  public func withEndView<Content>(_ view: @escaping () -> Content?) -> Self where Content : SwiftUICore.View
  public func withOnSubmit(submit: ((PSDKUIKit.PSDKValidationResult) -> Swift.Void)?) -> some PSDKUIKit.PSDKFieldBase
  
  public func withHandler(handler: @escaping PSDKUIKit.PSDKTextValidationHandler) -> some PSDKUIKit.PSDKFieldBase
  
  public func withOnChanged(onChanged: ((Swift.String) -> Swift.Void)?) -> some PSDKUIKit.PSDKFieldBase
  
  public func withMessages(_ messages: PSDKUIKit.PSDKTextFieldMessages) -> Self
  public func withAttributes(_ attributes: PSDKUIKit.PSDKTextFieldAttributes) -> Self
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class PSDKActionSheetHosting<Content> : SwiftUI.UIHostingController<PSDKUIKit.PSDKActionSheetContainer<Content>> where Content : PSDKUIKit.PSDKActionSheetBase {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public var canDismiss: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var onDisappear: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public init(view: Content, identifier: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class InteractiveModalTransitioningDelegate : ObjectiveC.NSObject, UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @objc deinit
}
public protocol PSDKTFState {
}
public struct PSDKTFEmptyState : PSDKUIKit.PSDKTFState {
}
public protocol PSDKTextFieldStoreProtocol : Combine.ObservableObject, PSDKUIKit.PSDKTextFieldStoreProvider {
  associatedtype StateType : PSDKUIKit.PSDKTFState
  var state: Self.StateType { get set }
}
public protocol PSDKTextFieldStoreProvider : AnyObject {
  var attributes: PSDKUIKit.PSDKTextFieldAttributes { get set }
  var messages: PSDKUIKit.PSDKTextFieldMessages { get set }
  var validationResult: PSDKUIKit.PSDKValidationResult { get set }
  var isRequestFocus: Swift.Bool { get }
  var isFocused: Swift.Bool { get }
  var text: Swift.String { get }
  var nextStore: (any PSDKUIKit.PSDKTextFieldStoreProvider)? { get }
  var onChanged: ((Swift.String) -> Swift.Void)? { get set }
  var handler: PSDKUIKit.PSDKTextValidationHandler? { get set }
  var onSubmit: ((PSDKUIKit.PSDKValidationResult) -> Swift.Void)? { get set }
  @discardableResult
  func setText(_ newValue: Swift.String) -> Swift.Bool
  func requestFocus()
  func setFocused(_ isFocused: Swift.Bool)
  func validateFormat(showError: Swift.Bool)
  func onChangedDefault(text: Swift.String)
}
extension PSDKUIKit.PSDKTextFieldStoreProtocol {
  public func validateFormat(showError: Swift.Bool)
  public func onChangedDefault(text: Swift.String)
}
open class PSDKTextFieldStore<StateType> : ObjectiveC.NSObject, PSDKUIKit.PSDKTextFieldStoreProtocol where StateType : PSDKUIKit.PSDKTFState {
  @Combine.Published @_projectedValueProperty($state) public var state: StateType {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $state: Combine.Published<StateType>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($validationResult) public var validationResult: PSDKUIKit.PSDKValidationResult {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $validationResult: Combine.Published<PSDKUIKit.PSDKValidationResult>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isRequestFocus) public var isRequestFocus: Swift.Bool {
    get
  }
  public var $isRequestFocus: Combine.Published<Swift.Bool>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($isFocused) public var isFocused: Swift.Bool {
    get
  }
  public var $isFocused: Combine.Published<Swift.Bool>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($text) public var text: Swift.String {
    get
  }
  public var $text: Combine.Published<Swift.String>.Publisher {
    get
  }
  public var attributes: PSDKUIKit.PSDKTextFieldAttributes
  public var messages: PSDKUIKit.PSDKTextFieldMessages
  public var nextStore: (any PSDKUIKit.PSDKTextFieldStoreProvider)?
  public var handler: PSDKUIKit.PSDKTextValidationHandler?
  public var onChanged: ((Swift.String) -> Swift.Void)?
  public var onSubmit: ((PSDKUIKit.PSDKValidationResult) -> Swift.Void)?
  public init(state: StateType)
  public init(state: StateType, validationResult: PSDKUIKit.PSDKValidationResult = .none, isRequestFocus: Swift.Bool = false, isFocused: Swift.Bool = false, text: Swift.String = "", attributes: PSDKUIKit.PSDKTextFieldAttributes = .init(), messages: PSDKUIKit.PSDKTextFieldMessages = .init(), nextStore: (any PSDKUIKit.PSDKTextFieldStoreProvider)? = nil, handler: PSDKUIKit.PSDKTextValidationHandler? = nil, onChanged: ((Swift.String) -> Swift.Void)? = nil, onSubmit: ((PSDKUIKit.PSDKValidationResult) -> Swift.Void)? = nil, prevText: Swift.String = "")
  @discardableResult
  public func setText(_ newValue: Swift.String) -> Swift.Bool
  open func didSetText(newValue: Swift.String)
  public func requestFocus()
  public func setFocused(_ isFocused: Swift.Bool = true)
  open func didSetFocused(isFocused: Swift.Bool)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class PSDKTextFieldEmptyStore : PSDKUIKit.PSDKTextFieldStore<PSDKUIKit.PSDKTFEmptyState> {
  public init(validationResult: PSDKUIKit.PSDKValidationResult = .none, isRequestFocus: Swift.Bool = false, isFocused: Swift.Bool = false, text: Swift.String = "", attributes: PSDKUIKit.PSDKTextFieldAttributes = .init(), messages: PSDKUIKit.PSDKTextFieldMessages = .init(), nextStore: (any PSDKUIKit.PSDKTextFieldStoreProvider)? = nil, handler: PSDKUIKit.PSDKTextValidationHandler? = nil, onChanged: ((Swift.String) -> Swift.Void)? = nil, onSubmit: ((PSDKUIKit.PSDKValidationResult) -> Swift.Void)? = nil, prevText: Swift.String = "")
  @objc deinit
}
public struct PSDKDocumentModel : PSDKUIKit.PSDKIdentifiable {
  public var id: Foundation.UUID
  public let code: Swift.String
  public let description: Swift.String
  public init(_ code: Swift.String, _ description: Swift.String)
  public static func == (a: PSDKUIKit.PSDKDocumentModel, b: PSDKUIKit.PSDKDocumentModel) -> Swift.Bool
  public typealias ID = Foundation.UUID
}
public enum PSDKWindowIdentifier : Swift.String {
  case main, alert
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
extension PSDKUIKit.PSDKUIKitIntrospectionViewController : Swift.Sendable {}
extension PSDKUIKit.PSDKInstructionView : Swift.Sendable {}
extension PSDKUIKit.PSDKInstructionView.Style : Swift.Equatable {}
extension PSDKUIKit.PSDKInstructionView.Style : Swift.Hashable {}
extension PSDKUIKit.PSDKInstructionModalView : Swift.Sendable {}
extension PSDKUIKit.PressedMode : Swift.Equatable {}
extension PSDKUIKit.PressedMode : Swift.Hashable {}
extension PSDKUIKit.PSDKDropdown : Swift.Sendable {}
extension PSDKUIKit.PSDKDropdownOptionElement : Swift.Sendable {}
extension PSDKUIKit.PSDKButton : Swift.Sendable {}
extension PSDKUIKit.PSDKProgressBar : Swift.Sendable {}
extension PSDKUIKit.PSDKFlowLayout : Swift.Sendable {}
extension PSDKUIKit.PSDKFlowLayout.Mode : Swift.Equatable {}
extension PSDKUIKit.PSDKFlowLayout.Mode : Swift.Hashable {}
extension PSDKUIKit.PSDKAttributedText : Swift.Sendable {}
extension PSDKUIKit.PSDKStyle : Swift.Equatable {}
extension PSDKUIKit.PSDKStyle : Swift.Hashable {}
extension PSDKUIKit.PSDKSuccessIcon : Swift.Sendable {}
extension PSDKUIKit.OptionalScrollViewModifier : Swift.Sendable {}
extension PSDKUIKit.PSDKOffsetKeyboard : Swift.Sendable {}
extension PSDKUIKit.PSDKStringBold : Swift.Sendable {}
extension PSDKUIKit.PSDKDemiModal : Swift.Sendable {}
extension PSDKUIKit.PSDKTextFieldGeneral : Swift.Sendable {}
extension PSDKUIKit.PSDKSecureFieldBase : Swift.Sendable {}
extension PSDKUIKit.PSDKSecureField : Swift.Sendable {}
@available(iOS 13.0, tvOS 13.0, macOS 10.15.0, *)
extension PSDKUIKit.PSDKUIKitIntrospectionView : Swift.Sendable {}
extension PSDKUIKit.PSDKLabelButton : Swift.Sendable {}
extension PSDKUIKit.PSDKActionSheetContainer : Swift.Sendable {}
extension PSDKUIKit.PSDKActionSheetContainer.DragDirection : Swift.Equatable {}
extension PSDKUIKit.PSDKActionSheetContainer.DragDirection : Swift.Hashable {}
extension PSDKUIKit.PSDKHyperlinkText : Swift.Sendable {}
extension PSDKUIKit.PSDKCountryModel.CodingKeys : Swift.Equatable {}
extension PSDKUIKit.PSDKCountryModel.CodingKeys : Swift.Hashable {}
extension PSDKUIKit.PSDKCountryModel.CodingKeys : Swift.RawRepresentable {}
extension PSDKUIKit.PSDKTextFieldCalendar : Swift.Sendable {}
extension PSDKUIKit.PSDKButtonStyle.Size : Swift.Equatable {}
extension PSDKUIKit.PSDKButtonStyle.Size : Swift.Hashable {}
extension PSDKUIKit.PSDKButtonStyle.ButtonType : Swift.Equatable {}
extension PSDKUIKit.PSDKButtonStyle.ButtonType : Swift.Hashable {}
extension PSDKUIKit.PSDKCheckBoxView : Swift.Sendable {}
extension PSDKUIKit.PSDKToast : Swift.Sendable {}
extension PSDKUIKit.PSDKLottieName : Swift.Equatable {}
extension PSDKUIKit.PSDKLottieName : Swift.Hashable {}
extension PSDKUIKit.PSDKLottieName : Swift.RawRepresentable {}
extension PSDKUIKit.PSDKLottieView : Swift.Sendable {}
extension PSDKUIKit.PSDKTipsView : Swift.Sendable {}
extension PSDKUIKit.PSDKTabBarButton : Swift.Sendable {}
extension PSDKUIKit.PSDKDateTextFieldWrapped : Swift.Sendable {}
extension PSDKUIKit.PSDKDateTextFieldWrapped.Coordinator : Swift.Sendable {}
extension PSDKUIKit.PSDKCircularProgressBar : Swift.Sendable {}
extension PSDKUIKit.PSDKAnimationCompletionObserverModifier : Swift.Sendable {}
extension PSDKUIKit.PSDKEmailTextField : Swift.Sendable {}
extension PSDKUIKit.PSDKCountryTextField : Swift.Sendable {}
extension PSDKUIKit.PSDKInstructionItem : Swift.Sendable {}
extension PSDKUIKit.PSDKTextField : Swift.Sendable {}
extension PSDKUIKit.Fonts : Swift.Equatable {}
extension PSDKUIKit.Fonts : Swift.Hashable {}
extension PSDKUIKit.Fonts : Swift.RawRepresentable {}
extension PSDKUIKit.PSDKProgressView : Swift.Sendable {}
extension PSDKUIKit.PSDKAccordionView : Swift.Sendable {}
extension PSDKUIKit.PSDKText : Swift.Sendable {}
extension PSDKUIKit.PSDKContentText : Swift.Sendable {}
extension PSDKUIKit.PSDKPhoneTextField : Swift.Sendable {}
extension PSDKUIKit.RadioButtonGroups : Swift.Sendable {}
extension PSDKUIKit.InterrogativeFloatButton : Swift.Sendable {}
extension PSDKUIKit.PSDKTextFieldAttributes.Style : Swift.Equatable {}
extension PSDKUIKit.PSDKTextFieldAttributes.Style : Swift.Hashable {}
extension PSDKUIKit.PSDKImage : Swift.Equatable {}
extension PSDKUIKit.PSDKImage : Swift.Hashable {}
extension PSDKUIKit.PSDKImage : Swift.RawRepresentable {}
extension PSDKUIKit.PSDKImageView : Swift.Sendable {}
extension PSDKUIKit.PSDKExpandableText : Swift.Sendable {}
extension PSDKUIKit.PSDKEmpasisColor : Swift.Equatable {}
extension PSDKUIKit.PSDKEmpasisColor : Swift.Hashable {}
extension PSDKUIKit.PSDKEmpasisColor : Swift.RawRepresentable {}
extension PSDKUIKit.PSDKEmpasisColor : Swift.Sendable {}
extension PSDKUIKit.PSDKTertiaryColor : Swift.Equatable {}
extension PSDKUIKit.PSDKTertiaryColor : Swift.Hashable {}
extension PSDKUIKit.PSDKTertiaryColor : Swift.RawRepresentable {}
extension PSDKUIKit.PSDKTertiaryColor : Swift.Sendable {}
extension PSDKUIKit.PSDKColor : Swift.Equatable {}
extension PSDKUIKit.PSDKColor : Swift.Hashable {}
extension PSDKUIKit.PSDKColor : Swift.Sendable {}
extension PSDKUIKit.PSDKColor.Brand : Swift.Equatable {}
extension PSDKUIKit.PSDKColor.Brand : Swift.Hashable {}
extension PSDKUIKit.PSDKColor.Brand : Swift.RawRepresentable {}
extension PSDKUIKit.PSDKColor.Brand : Swift.Sendable {}
extension PSDKUIKit.PSDKColor.Surface : Swift.Equatable {}
extension PSDKUIKit.PSDKColor.Surface : Swift.Hashable {}
extension PSDKUIKit.PSDKColor.Surface : Swift.RawRepresentable {}
extension PSDKUIKit.PSDKColor.Surface : Swift.Sendable {}
extension PSDKUIKit.ThemeColorReader : Swift.Sendable {}
extension PSDKUIKit.PSDKColorReader : Swift.Sendable {}
extension PSDKUIKit.ActionSheetSize : Swift.Equatable {}
extension PSDKUIKit.ActionSheetSize : Swift.Hashable {}
extension PSDKUIKit.PSDKDraggableView : Swift.Sendable {}
extension PSDKUIKit.PSDKDraggableView.DragDirection : Swift.Equatable {}
extension PSDKUIKit.PSDKDraggableView.DragDirection : Swift.Hashable {}
extension PSDKUIKit.WechatCompressType : Swift.Equatable {}
extension PSDKUIKit.WechatCompressType : Swift.Hashable {}
extension PSDKUIKit.PSDKOtpTextField : Swift.Sendable {}
extension PSDKUIKit.PrivacyPolicyView : Swift.Sendable {}
extension PSDKUIKit.PSDKCloseTextField : Swift.Sendable {}
extension PSDKUIKit.InteractiveModalTransitioningDelegate : Swift.Sendable {}
extension PSDKUIKit.PSDKWindowIdentifier : Swift.Equatable {}
extension PSDKUIKit.PSDKWindowIdentifier : Swift.Hashable {}
extension PSDKUIKit.PSDKWindowIdentifier : Swift.RawRepresentable {}
